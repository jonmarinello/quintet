









                          QUINTET Reference Manual
                         Version 2.05 - June, 1986










                                Written by:

                               Jon Marinello









                                 Edited by:

                               Eric Villette











                                Logordi SA.
                          17, rue de la Tremoille
                                75008 Paris
                                   France











        




        WINDOW                   OLQCL Only                   WINDOW




        NAME
                Window - Special purpose window package

        SYNOPSIS
                window

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        External program

        DESCRIPTION
                Window is a hardware independent  windowing  package
                for  use  with  programs generated by QUINTET and by
                QUINTET itself. It  is  not  integrated  within  the
                programs which use it but, instead is implemented as
                an  external  process.  This  feature  allows   user
                programs to be smaller in size and more importantly,
                allows  multi-process  access  to  the  same  window
                process.

                The window program is invoked from the command  line
                via an external pipe '|'. All child processes of the
                parent process which pipes on window  will  continue
                to   pipe   on  window.  Therefore,  window  may  be
                considered  as  merely  a  filter   in   traditional
                terminology.

                Window  is  fully  bufferized  to  enhance   display
                characteristics  as  well as to improve performance.
                The user has complete control of this  bufferization
                via  the OLQCL function "REDRAW". This feature gives
                the user the possibility of "virtual" drawing to the
                current  window.   To  understand this notion, it is
                necessary to define the following:


                Virtual Window:         Bufferized window maintained
                                        in   memory  by  the  window
                                        program itself.  All  window
                                        commands   except   "REDRAW"
                                        only affect this window.

                Physical Window:        An area on the user's actual
                                        terminal     screen    which
                                        corresponds to  the  virtual
                                        window  maintained in memory
                                        by the window program.   The
                                        "REDRAW" command serves as a
                                        buffer flusher which has the
                                        effect   of   updating   the
                                        user's physical window.




        QUINTET                    - 1 -                 LOGORDI SA.




        WINDOW                   OLQCL Only                   WINDOW






        By virtual drawing we mean that the user  sends  information
        to  window but that data is not drawn on his physical window
        until the "REDRAW" command is sent. This feature allows  the
        user  for  example  to clear the window, print some text and
        then "REDRAW" all the information in one  command.  The  net
        effect  is  that  the  information  is  displayed  in a more
        esthetic fashion.  Without  the  "REDRAW"  capability,  each
        command  would  be  displayed  immediately  (i.e. the window
        would first be cleared and then the data displayed).

        The "REDRAW" command is efficient: only  the  areas  of  the
        current  window  that  have effectively changed are redrawn.
        This reduces the  amount  of  time  needed  to  perform  the
        operation of physical drawing.

        All virtual windows are maintained on  a  stack.  Therefore,
        all  accesses  to the current virtual window are to the last
        (i.e. most recently allocated) window.

        EXAMPLE
                bin/accting | /usr/quintet/ubin/window

        RETURN VALUE
                None.

        SEE ALSO
                screen_tools, termdef.

        BUGS
                Window only works with QUINTET or  programs  written
                with QUINTET.























        QUINTET                    - 2 -                 LOGORDI SA.




        ADD()                   OLQCL & BQCL                   ADD()




        NAME
                ADD - Write a new record to an L-ISAM file

        SYNOPSIS
                ADD(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                ADD will attempt to add a new  record  to  the  file
                associated  with  the  file descriptor "Fn".  In all
                cases, it is the  user's  responsibility  to  ensure
                that  the  correct  key values have been loaded into
                the record buffer before calling  ADD.   Key  values
                may  be  loaded  manually  or  by loading the entire
                record via a call to the isam READ function.

                The contents of the record buffer are not changed by
                a call to ADD.

        EXAMPLE
                .
                .
                .
                F1.name : "Zulu";       /* Load key values */
                F1.pname : "Joma";

                F1.addr1 : "222 West 63rd Street";
                F1.addr2 : "West Los Angeles, CA";
                F1.zip : "22786";
                F1.acct : "S9249234";
                F1.tele : "(213) 345-6787";
                F1.bal : 4567.33;
                ADD(F1);                /* Add the record */
                IF (ISERRNO <> 0) {     /* Error */

                        MSG("Write error.");
                        $_ret : 1;

                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.




        QUINTET                    - 3 -                 LOGORDI SA.




        ADD()                   OLQCL & BQCL                   ADD()





        SEE ALSO
                ISERRNO, ERASE(), MODIFY(), WRITE().





















































        QUINTET                    - 4 -                 LOGORDI SA.




        CLOSE()                 OLQCL & BQCL                 CLOSE()




        NAME
                CLOSE - Close an L-ISAM file

        SYNOPSIS
                CLOSE(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                CLOSE will close the file associated with  the  file
                descriptor  "Fn". Closing an already closed file has
                no effect.

        EXAMPLE
                .
                .
                .
                CLOSE(F1);
                IF (ISERRNO <> 0) {
                        MSG("Bad close on /tmp/daily");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                DEFINE, ISERRNO, REMOVE(), NAME().



















        QUINTET                    - 5 -                 LOGORDI SA.




        DEFINE                   OLQCL Only                   DEFINE




        NAME
                DEFINE - Define interactive access to an L-ISAM file

        SYNOPSIS
                { DEFINE | DEF }
                        Fn: "file_name" KEY "key_name";
                                .
                                .
                                .
                { END OF DEFINE | EOD }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The  "DEFINE  ...  END  OF  DEFINE"  OLQCL  sequence
                defines  the  user  access  to one or more files for
                interactive processing.  File descriptor enumeration
                may  vary  from  "F0" to "F99". If "Fn" is "F0", the
                current master file will be accessed.  The  physical
                file  name  is  mapped  to  a  file  descriptor. All
                further access to the file will then be accomplished
                through  the  use  of the file descriptor "Fn". Only
                one "DEFINE ... END OF  DEFINE"  OLQCL  sequence  is
                allowed  per  user  script.  The  files  defined are
                automatically opened and the current record  pointer
                is positioned on the first logical record in the key
                sorting specified  by  "key_name"  (if  any  records
                exist).  Note  that  no  data  records  are actually
                loaded. In the  case  of  "F0",  no  change  to  the
                current record pointer takes place.

        EXAMPLE
                .
                .
                .
                DEFINE
                        F0: "qf1" KEY "qf1k1";
                        F1: "qf2" KEY "qf2k1";
                EOD
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                ISERRNO, CLOSE(), NAME(), REMOVE(), START().





        QUINTET                    - 6 -                 LOGORDI SA.




        DEFINE                   OLQCL Only                   DEFINE




        BUGS
                There is no way to check ISERRNO after the  open  of
                each file defined.





















































        QUINTET                    - 7 -                 LOGORDI SA.




        ERASE()                 OLQCL & BQCL                 ERASE()




        NAME
                ERASE - Delete an existing record from an L-ISAM file

        SYNOPSIS
                ERASE(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                ERASE will attempt to delete an existing record from
                the  file  associated with the file descriptor "Fn".
                In all cases, it is  the  user's  responsibility  to
                ensure  that the correct key values have been loaded
                into the record buffer before  calling  ERASE.   Key
                values  may  be  loaded  manually  or by loading the
                entire record via a call to the isam READ function.

                The contents of the record buffer are not changed by
                a call to ERASE.

        EXAMPLE
                .
                .
                .
                F1.name : "Zulu";       /* Load key values */
                F1.pname : "Joma";
                ERASE(F1);              /* Delete the record */
                IF (ISERRNO <> 0) {     /* Error */

                        MSG("Delete error.");
                        $_ret : 1;

                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO, ADD(), MODIFY(), WRITE().








        QUINTET                    - 8 -                 LOGORDI SA.




        GETEQ()                 OLQCL & BQCL                 GETEQ()




        NAME
                GETEQ,
                GETGE,
                GETGT,
                GETLT - Read a record randomly from an L-ISAM file

        SYNOPSIS
                GETEQ(Fn, field_name, key_val, ret_def)
                FD      Fn;
                VAR     field_name;
                EXPR    key_val;
                EXPR    ret_def;

                GETGE(Fn, field_name, key_val, ret_def)
                FD      Fn;
                VAR     field_name;
                EXPR    key_val;
                EXPR    ret_def;

                GETGT(Fn, field_name, key_val, ret_def)
                FD      Fn;
                VAR     field_name;
                EXPR    key_val;
                EXPR    ret_def;

                GETLT(Fn, field_name, key_val, ret_def)
                FD      Fn;
                VAR     field_name;
                EXPR    key_val;
                EXPR    ret_def;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                GETEQ, GETGE, GETGT  and  GETLT  all  randomly  read
                records  from  the  file  associated  with  the file
                descriptor "Fn".

                The field  named  as  the  second  parameter  called
                "field_name"   specifies   the  type  of  the  value
                returned by the function. This means  that  after  a
                successful read, the value contained in "field_name"
                will be returned.  The  possible  return  types  are
                (F)loating,  (I)ntegral  and  (S)tring as defined in
                the Data Dictionary.

                The third parameter is the value to be  loaded  into
                the  first  key  part  of the key sorting definition
                which was defined via  the  "DEFINE  ...  EOD"  code




        QUINTET                    - 9 -                 LOGORDI SA.




        GETEQ()                 OLQCL & BQCL                 GETEQ()




                sequence for the file "Fn".

                The fourth parameter is the  default  return  value.
                This  parameter  must  match in type with the second
                parameter for  obvious  reasons.  Type  checking  is
                performed by the OLQCL Translator for this error. If
                you are using these functions in  the  BQCL,  it  is
                possible  to  specify an action instead of a default
                value. The only action available at the present time
                is  to  abort further processing if an error occurs.
                To specify this action, supply the keyword "STOP" as
                the fourth parameter.

                These functions update the current record pointer.

        EXAMPLE
                .
                .
                .
                &s_name : GETGT(F1, F1.name, "Zulu",
                        "Record Not Found");
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO, GETPREVIOUS(), GETNEXT(), START().
























        QUINTET                    - 10 -                LOGORDI SA.




        GETNEXT()               OLQCL & BQCL               GETNEXT()




        NAME
                GETNEXT,
                GETPREVIOUS - Read the next record in an L-ISAM file

        SYNOPSIS
                GETNEXT(Fn)
                FD      Fn;

                GETPREVIOUS(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                GETNEXT and GETPREVIOUS read the  next  or  previous
                record  respectively in the file associated with the
                file descriptor "Fn". The action of these  functions
                depends  on  the  contents  of  the  currect  record
                pointer. Only  "start"  and  "read"  isam  functions
                update the current record pointer.

        EXAMPLE
                .
                .
                .
                WHILE (TRUE) {
                        GETNEXT(F1);
                        IF (ISERRNO = EENDFILE)
                                BREAK;
                        IF (ISERRNO <> 0) {
                                MSG("Getnext read error.");
                                $_ret : 1;
                                BREAK;
                        }
                        $total : $total + F1.amount;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO,  GETRND(),   GETEQ(),   GETGE(),   GETGT(),
                GETLT(), START().





        QUINTET                    - 11 -                LOGORDI SA.




        GETRND()                OLQCL & BQCL                GETRND()




        NAME
                GETRND - Read a record randomly from an L-ISAM file

        SYNOPSIS
                GETRND(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                GETRND will attempt to randomly read a record in the
                file associated with the file descriptor "Fn".  This
                function updates the current record pointer.

        EXAMPLE
                .
                .
                .
                F1.name : "Zulu";       /* Load key values */
                F1.pname : "Joma";
                GETRND(F1);
                IF (ISERRNO <> 0) {     /* Error */
                        MSG("Random read error.");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO, GETPREVIOUS(), GETEQ(),  GETGE(),  GETGT(),
                GETLT(), GETNEXT(), START().
















        QUINTET                    - 12 -                LOGORDI SA.




        GETUID()                OLQCL & BQCL                GETUID()




        NAME
                GETUID - Generate a unique identification number

        SYNOPSIS
                GETUID(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                GETUID  returns  a  unique  number  for   the   file
                associated  with  the file descriptor "Fn". For each
                isam file, a unique counter is maintained to be used
                for  this  purpose. Each time GETUID is called, this
                counter is incremented.

        EXAMPLE
                .
                .
                .
                F2.unique : GETUID(F1);
                IF (ISERRNO <> 0) {
                        MSG("Can't generate a unique id.");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO.

















        QUINTET                    - 13 -                LOGORDI SA.




        ISERRNO                 OLQCL & BQCL                 ISERRNO




        NAME
                ISERRNO - error indicator for L-ISAM calls

        SYNOPSIS
                ISERRNO

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Integer

        DESCRIPTION
                ISERRNO is an external variable whose value  is  set
                whenever an error occurs in an L-ISAM function call.
                Each time an L-ISAM function is called,  ISERRNO  is
                reset   to   zero.   If   the   function   completes
                successfully, ISERRNO will remain set to zero. It is
                suggested  that  the user query the value of ISERRNO
                after returning from all L-ISAM function  calls.  It
                is  the  responsibility  of the user to perform this
                function.

                The following  is  a  list  of  the  possible  error
                numbers  and their names which ISERRNO may assume in
                case of error.

                100     EDUPL           Duplicate record.

                        An attempt was made to write a record  to  a
                        file in which an equal key already existed.

                101     ENOTOPEN        File not open.

                        An attempt was made to perform  some  action
                        on an isam file which is not currently open.

                102     EBADARG         Illegal argument.

                        Some invalid argument was passed  to  an  L-
                        ISAM function.

                103     EBADKEY         Bad key descriptor.

                        An invalid key description was passed to  an
                        L-ISAM function.

                104     ETOOMANY        Too many files.

                        An attempt was made to open more files  than
                        the system will allow.

                105     EBADFILE        Corrupted isam file.




        QUINTET                    - 14 -                LOGORDI SA.




        ISERRNO                 OLQCL & BQCL                 ISERRNO




                        An attempt was made to access a  file  which
                        is not in L-ISAM format.

                106     ENOTEXCL        Need exclusive access.

                        An attempt was made to either  build  an  L-
                        ISAM  file  or  manipulate a new or existing
                        key  sorting  without  specifying  exclusive
                        locking of the file.

                107     ELOCKED         Record or file locked.

                        An attempt to access either a locked  record
                        or file was made.

                108     EKEXISTS        Index already exists.

                        An attemt to add  a  key  sorting  which  is
                        already defined was made.

                109     EPRIMKEY        Primary index.

                        An attempt was made to  delete  the  primary
                        key sorting.

                110     EENDFILE        End of file.

                        The end of file was reached when reading the
                        given L-ISAM file

                111     ENOREC          Record not found.

                        An attempt was made  to  randomly  access  a
                        record which does not exist.

                112     ENOCURR         No current record.

                        An attempt  was  made  to  access  a  record
                        without  first  reading a record to load the
                        appropriate buffer.

                113     EFLOCKED        File is in use.

                        An attempt was made to access an L-ISAM file
                        which is currently locked.

                114     EF.bp NAME            File name too long.

                        When calling an L-ISAM function  which  uses
                        the  file's  physical  name,  a filename was
                        specified which is longer  than  the  system
                        maximum.




        QUINTET                    - 15 -                LOGORDI SA.




        ISERRNO                 OLQCL & BQCL                 ISERRNO




                115     ENOLOK          Bad lock device.

                        Not currently  supported  from  the  QUINTET
                        languages.

                116     EINPUTONLY      File open for input only.

                        Not currently  supported  from  the  QUINTET
                        languages.

                117     EOUTPUTONLY     File open for output only.

                        Not currently  supported  from  the  QUINTET
                        languages.

                118     ENOTMANULOCK    Not in manual locking mode.

                        Not currently  supported  from  the  QUINTET
                        languages.

                119     EBADLOCK        Invalid lock definition.

                        Not currently  supported  from  the  QUINTET
                        languages.

                120     EBADVERSION     Bad file version.

                        Not currently  supported  from  the  QUINTET
                        languages.

        EXAMPLE

                .
                .
                .
                WRITE(F1, DELETE);
                IF (ISERRNO = ENOREC) {
                        MSG("Record was not found.");
                } ELSE IF (ISERRNO <> 0) {
                        MSG("Some other Error.");
                }
                .
                .
                .

        ADDITIONAL INFORMATION
                If ISERRNO contains a value less than  100,  consult
                the  standard UNIX* documentation supplied with your
                machine and see the section describing "errno".  You
                will  find a list of the remaining error numbers and
                causes.





        QUINTET                    - 16 -                LOGORDI SA.




        MODIFY()                OLQCL & BQCL                MODIFY()




        NAME
                MODIFY - Modify an existing record in an L-ISAM file

        SYNOPSIS
                MODIFY(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                MODIFY will attempt to modify an existing record  in
                the  file  associated with the file descriptor "Fn".
                In all cases, it is  the  user's  responsibility  to
                ensure  that the correct key values have been loaded
                into the record buffer before calling  MODIFY.   Key
                values  may  be  loaded  manually  or by loading the
                entire record via a call to the isam READ function.

                The contents of the record buffer are not changed by
                a call to MODIFY.

        EXAMPLE
                .
                .
                .
                F1.name : "Zulu";       /* Load key values */
                F1.pname : "Joma";

                F1.addr1 : "222 West 63rd Street";
                F1.addr2 : "West Los Angeles, CA";
                F1.zip : "22786";
                F1.acct : "S9249234";
                F1.tele : "(213) 345-6787";
                F1.bal : 4567.33 - $withdr;
                MODIFY(F1);             /* Modify the balance */
                IF (ISERRNO <> 0) {     /* Error */
                        MSG("Modify error.");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO




        QUINTET                    - 17 -                LOGORDI SA.




        MODIFY()                OLQCL & BQCL                MODIFY()




                ISERRNO, ADD(), ERASE(), WRITE().























































        QUINTET                    - 18 -                LOGORDI SA.




        PREPARE                  BQCL Only                   PREPARE




        NAME
                PREPARE - Prepare an L-ISAM file for batch processing

        SYNOPSIS
                { PREPARE | PREP }
                        [(WRITE)] Fn: "application_name", "file_name"
                        KEY "key_name";
                { END OF PREPARE | EOP }

                { PREPARE | PREP }
                        [(WRITE)] Fn: "application_name", "file_name"
                        KEY
                                { ASC | DESC } "zone_name",
                                        .
                                        .
                                        .
                                { ASC | DESC } "zone_name";
                { END OF PREPARE | EOP }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "PREPARE  ...  END  OF  PREPARE"  BQCL  sequence
                defines  the  user  access  to one or more files for
                batch processing. File  descriptor  enumeration  may
                vary  from "F0" to "F99".  The physical file name is
                mapped to a file descriptor. All further  access  to
                the  file  will then be accomplished through the use
                of the file descriptor.

                It  is  possible  to  access  files  from  different
                applications    by    specifying    the    different
                "application_name" parameters.   The  paths  to  the
                files will be obtained from the Data Dictionary.

                Only one "PREPARE ... END OF PREPARE" BQCL  sequence
                is  allowed  per  user script. The files defined are
                automatically opened and the current record  pointer
                is  positioned  on  the first logical record (if any
                records exist)  in  the  key  sorting  specified  by
                "key_name"  or  the  user  contructed  temporary key
                sorting.

                User defined temporary key sortings may  contain  up
                to  eight  key  parts  (zones)  and  are created and
                deleted at execution time. It is important  to  note
                that  files  accessed  in  this manner are opened in
                EXCLUSIVE lock, while the key sorting is created and
                deleted.   That  means that other users are not able




        QUINTET                    - 19 -                LOGORDI SA.




        PREPARE                  BQCL Only                   PREPARE




                to access the file while these  two  phases  of  the
                program are running.

                Normally all files  are  opened  in  AUTOLOCK.  That
                means  other  users  may  access records in the same
                file when they are not locked  by  other  processes.
                The  default  access  mode is READ ONLY. To override
                these default parameters, include the  BQCL  keyword
                "(WRITE)"  before  the  file  descriptor.  This will
                cause the file in question to be opened in EXCLUSIVE
                lock and in READ/WRITE mode.

        EXAMPLE
                .
                .
                .
                PREPARE
                        (WRITE) F0: "qtest", "qf1" KEY "qf1k1";
                                F1: "qtest", "qf2" KEY DESC "tele", ASC "name";
                END OF PREPARE
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                ISERRNO, CLOSE(), NAME(), REMOVE(), START().

        BUGS
                There is no way to check ISERRNO after the  open  of
                each file defined.























        QUINTET                    - 20 -                LOGORDI SA.




        REMOVE()                OLQCL & BQCL                REMOVE()




        NAME
                REMOVE - Remove an L-ISAM file

        SYNOPSIS
                REMOVE(Fn)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                REMOVE will remove the isam file  specified  by  the
                file  descriptor  "Fn".   There  are  actually three
                files which are removed. They are:


                        -       path.dat

                        -       path.idx

                        -       path.aln


                where  the  prefix  "path"  is  generated  via   the
                association to the file desriptor "Fn".  Beware that
                once an L-ISAM file is removed, it is gone  forever.
                The only way to recover the file is from some backup
                medium such as tape, etc...  It is also necessary to
                close the file in question before removing it.

        EXAMPLE
                .
                .
                .
                CLOSE(F1);
                REMOVE(F1);
                IF (ISERRNO <> 0) {
                        MSG("Can't remove client isam file");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO




        QUINTET                    - 21 -                LOGORDI SA.




        REMOVE()                OLQCL & BQCL                REMOVE()




                ISERRNO, CLOSE().

        BUGS
                If  a  rebuild  setup  file  exists  for  the   file
                specified by "Fn", it is not removed.



















































        QUINTET                    - 22 -                LOGORDI SA.




        NAME()                OLQCL & BQCL                NAME()




        NAME
        	NAME - Rename an L-ISAM file

        SYNOPSIS
	        NAME(Fn, newname)
                FD      Fn;
                STRING  newname;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                NAME will rename the isam  file  specified  by
                the  file  descriptor  "Fn" to the file specified by
                "newname". There are actually three files which  are
                renamed.  They are:


                        -       path.dat

                        -       path.idx

                        -       path.aln


                where  the  prefix  "path"  is  generated  via   the
                association  to the file desriptor "Fn".  It is also
                necessary to  close  the  file  in  question  before
                removing it.

        EXAMPLE
                .
                .
                .
                CLOSE(F1);
	        NAME(F1, "/tmp/vtmp");
                IF (ISERRNO <> 0) {
                        MSG("Can't rename vendors isam file");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon  successful completion,  ISERRNO will be set to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.






        QUINTET                    - 23 -                LOGORDI SA.



        
        NAME()                OLQCL & BQCL                NAME()





        SEE ALSO
                ISERRNO

        BUGS
                If  a  rebuild  setup  file  exists  for  the   file
                specified  by  the  file  descriptor "Fn", it is not
                renamed.
















































        QUINTET                    - 24 -                LOGORDI SA.




        START()                 OLQCL & BQCL                 START()




        NAME
                START - Position somewhere in an L-ISAM file

        SYNOPSIS
                START(Fn)
                FD      Fn;

                START(Fn, "key_name", sig_chars, mode)
                FD      Fn;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                START in both its forms, attempts  to  position  the
                current  record  pointer  within the file associated
                with the file descriptor "Fn". The  associated  data
                record  is not loaded (to load data records requires
                a "read" operation, see GETEQ(), etc...).

                The first form of the START command assumes that all
                the  characters  are significant in key comparisons.
                Secondly, it assumes that the mode of the  start  is
                EQUAL. Lastly, it is assumed that the start function
                will use the key sorting defined in the "DEFINE  ...
                EOD"  code  sequence which was used to designate the
                file.

                The second form of the START  function  is  somewhat
                less terse but more general than the first form. The
                second  parameter  "key_name"  specifies   the   key
                sorting  on which the start will operate. This means
                you can change sortings at run time. The key sorting
                you specify must already exist in the isam file. The
                third parameter specifies how  many  characters  are
                significant  in  key  comparisons.  A  value of zero
                means the  whole  key.   Only  positive  values  are
                allowed.  The  last  parameter  is the start "mode".
                One of the following constants must be used:


                FIRST   Start at the first record in the  file.  The
                        "sig_chars"  parameter is not tested in this
                        case.

                LAST    Start at the last record in  the  file.  The
                        "sig_chars"  parameter is not tested in this
                        case.

                EQUAL   Start at the first equal record.




        QUINTET                    - 25 -                LOGORDI SA.




        START()                 OLQCL & BQCL                 START()




                GTEQ    Start at the first equal record or if it  is
                        not found, start at the next record.

        EXAMPLE
                .
                .
                .
                /* Assuming "qf1k1" was DEFINED */
                /* This START is the same as    */
                /* the next example.            */
                F1.name : "Joma";
                START(F1);
                .
                .
                .
                F1.name : "Joma";
                START(F1, "qf1k1", 0, EQUAL);
                .
                .
                .
                F1.sex : "M";
                F1.tele : " ";
                START(F1, "qf1k2", 0, GTEQ);
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO,  GETRND(),   GETEQ(),   GETGE(),   GETGT(),
                GETLT(), GETNEXT(), GETPREVIOUS().





















        QUINTET                    - 26 -                LOGORDI SA.




        WRITE()                 OLQCL & BQCL                 WRITE()




        NAME
                WRITE - Perform a write operation on an L-ISAM file

        SYNOPSIS
                WRITE(Fn, mode)
                FD      Fn;
                CS      mode;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                WRITE may  be  used  to  perform  several  different
                functions.   New  records  may  be  added,  existing
                records  may  be  updated  or  deleted.   The   file
                associated  with  the  file  descriptor "Fn" will be
                accessed. The following constants which  are  passed
                through "mode" define the valid operations which can
                be performed by the WRITE function:


                CREATE - a new record to the file "Fn"

                DELETE - an existing record from the file "Fn"

                UPDATE - an existing record in the file "Fn"


                In all cases, it is  the  user's  responsibility  to
                ensure  that the correct key values have been loaded
                into the record buffer before  calling  WRITE.   Key
                values  may  be  loaded  manually  or by loading the
                entire record via a call to the isam READ function.

                The contents of the record buffer are not changed by
                a call to WRITE.

        EXAMPLE
                .
                .
                .
                F1.name : &save_n;      /* Load key values */
                F1.pname : &save_pn;
                WRITE(F1, DELETE);      /* Delete the record */
                IF (ISERRNO <> 0) {     /* Error */
                        IF (ISERRNO = ENOREC) {
                                MSG("Can't find record.");
                                $_ret : 1;
                        }
                        ELSE {




        QUINTET                    - 27 -                LOGORDI SA.




        WRITE()                 OLQCL & BQCL                 WRITE()




                                MSG("Some other error.");
                                $_ret : 1;
                        }
                }
                .
                .
                .
                F1.name : "Zulu";       /* Load key values */
                F1.pname : "Joma";

                F1.addr1 : "222 West 63rd Street";
                F1.addr2 : "West Los Angeles, CA";
                F1.zip : "22786";
                F1.acct : "S9249234";
                F1.tele : "(213) 345-6787";
                F1.bal : 4567.33;
                WRITE(F1, CREATE);      /* Create new record */
                IF (ISERRNO <> 0) {
                        MSG("Write error on F1");
                        $_ret : 1;
                }
                .
                .
                .
                F1.name : "Zulu";       /* Load key values */
                F1.pname : "Joma";

                F1.addr1 : "222 West 63rd Street";
                F1.addr2 : "West Los Angeles, CA";
                F1.zip : "22786";
                F1.acct : "S9249234";
                F1.tele : "(213) 345-6787";
                F1.bal : 4567.33 - $withdr;
                WRITE(F1, UPDATE);      /* Update the balance */
                IF (ISERRNO <> 0) {
                        MSG("Update error on F1");
                        $_ret : 1;
                }
                .
                .
                .

        RETURN VALUE
                Upon successful completion, ISERRNO will be  set  to
                zero. Otherwise, ISERRNO will be set to indicate the
                error.

        SEE ALSO
                ISERRNO, ADD(), MODIFY(), ERASE().







        QUINTET                    - 28 -                LOGORDI SA.




        PAGE                     BQCL Only                      PAGE




        NAME
                PAGE - Force a page eject

        SYNOPSIS
                PAGE

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "PAGE" command will force a page  eject  on  the
                printer.  If  you  have  defined either a heading or
                footing block, they may  be  executed  depending  on
                when   the   "PAGE"  command  is  encountered.   The
                internal page and  line  counters  (i.e.  $rgpg  and
                $rglcount) are updated.

        EXAMPLE

                .
                .
                .
                PAGE;
                PRINT   "Date: ", $rgdd USING "99", "/",
                        $rgmm USING "99", "/",
                        $rgyy USING "99", SPACE 60,
                        "Time: ", $rghrs USING "99", ":",
                        $rgmin USING "99";
                PAGE;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                PRINT, SKIP, USING.
















        QUINTET                    - 29 -                LOGORDI SA.




        PRINT                    OLQCL Only                    PRINT




        NAME
                PRINT - Print something

        SYNOPSIS
                PRINT   [ numeric_object USING "format_control_string" ]
                        [, NL ]
                        [, string_object [ USING { Lnn | Rnn } ]]
                        [, SPACE nn ]
                        [, "string_constant" [ USING { Lnn | Rnn } ]]
                        [, STRING(nn, "repeat_character") ]
                        .
                        .
                        .
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "PRINT" command  provides  an  output  interface
                from   batch   report  programs.  File  zones,  work
                variables and string constants may be printed  using
                various  formatting  techniques  (see  the reference
                manual section entitled "USING").

                Horizontal as  well  as  vertical  spacing  is  also
                provided  through  the  use  of the "SPACE" and "NL"
                commands. The "SPACE" command will skip "nn" columns
                to  the  right from the current print head position.
                The "NL" command will force a new line and  carriage
                return sequence.

                The "STRING()" function provides a terse  method  of
                producing  long  sequences  of a repeating character
                such as a dotted line 80 columns wide.

                The internal page and line counters (i.e. $rgpg  and
                $rglcount)  are automatically updated to reflect the
                current state of the report  during  all  phases  of
                printing.

                Note that if "string_object" is not printed with the
                "USING"  clause,  it  must be a file zone defined in
                the Data Dictionary. The length of the zone will  be
                obtained  from the Data Dictionary and the zone will
                be left-justified by default.

                There is no limit to the number of objects that  one
                "PRINT" statement may contain.





        QUINTET                    - 30 -                LOGORDI SA.




        PRINT                    OLQCL Only                    PRINT




        EXAMPLE

                .
                .
                .
                PAGE;
                PRINT   STRING(80, "."), NL,
                        STRING(80, "."), NL,
                        STRING(80, "."), NL;
                SKIP    60;
                PRINT   STRING(80, "."), NL,
                        STRING(80, "."), NL,
                        STRING(80, "."), NL;
                PRINT   NL, NL, "Pay to the order of: ",
                        F1.name USING L25, SPACE 10,
                        F1.chk_amt USING "**********.99", NL, NL,
                        "Sub total: ", F1.subtot USING "$$$$$$$$$$.99-",
                        SPACE 5, "Grand total: ", F1.gtot USING
                        "$$$$$$$$$$.99-", NL, NL;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                SKIP, USING, PAGE, STRING().




























        QUINTET                    - 31 -                LOGORDI SA.




        SKIP                     BQCL Only                      SKIP




        NAME
                SKIP - Skip lines

        SYNOPSIS
                SKIP nn

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "SKIP" command allows the user to either force a
                page  eject  if  the number of lines "nn" is greater
                than the number of lines remaining  in  the  current
                page  or  to  skip  the number of lines specified by
                "nn" if "nn" is less than the number of  lines  left
                in the current page.

        EXAMPLE

                .
                .
                .
                PRINT   F1.addr USING L35;
                SKIP    50;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                PRINT, USING, PAGE.

        BUGS
                It is impossible to "SKIP" more than  the  remaining
                lines within the current page.

















        QUINTET                    - 32 -                LOGORDI SA.




        STRING()                 BQCL Only                  STRING()




        NAME
                STRING - Generate a string of repeating characters

        SYNOPSIS
                STRING(times, repeat_character_literal)
                VAR     times;
                STRING  repeat_character_literal

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                The "STRING()" function provides a compact method of
                generating  a  string of repeating characters. Using
                this  function  will  reduce  source  as   well   as
                executable code sizes.

                A limit of 255 charcaters is imposed on  the  length
                of  the  string generated.  If the "times" specified
                is greater than 255, the generated  string  will  be
                truncated to 255 characters.

                The "repeat_character_literal" may  be  longer  than
                one  character  but  only  the  first  character  is
                recognized.

                The memory used by the "STRING()" function  is  only
                allocated  one time and therefor, sucessive calls to
                "STRING()" destroy  the  previous  contents  of  the
                memory alocated.

        EXAMPLE

                .
                .
                .
                PRINT   STRING(80, "+"), NL,
                        STRING(80, "="), NL,
                        STRING(80, "+"), NL;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                PRINT, PAGE, SKIP, USING.






        QUINTET                    - 33 -                LOGORDI SA.




        USING                    BQCL Only                     USING




        NAME
                USING - Print formatted alphanumeric and numeric
                        output

        SYNOPSIS
                USING { "format_control_string" | Lnn | Rnn }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "USING" function provides a simple but powerfull
                means of formatting alphanumeric and numeric data in
                conjunction with the  "PRINT"  statement  in  report
                programs.

                Numeric  data  may  be  printed  in  any  number  of
                different   formats   depending   on  the  value  of
                "format_control_string".

                Alphanumeric data may be formatted and printed using
                "Lnn"  or "Rnn" to either left- or right-justify the
                object to  be  printed  where  "nn"  represents  the
                number  of columns the object will be printed in. If
                the  object  to  be  printed  is  larger  than  "nn"
                columns, the remaining high- or low-order characters
                will be truncated  depending  on  whether  left-  or
                right-justification  was specified. If the object to
                be   printed   is   smaller   than   "nn"   columns,
                justification within "nn" columns will take place.

        EXAMPLE

                .
                .
                .
                PRINT   NL, NL, "Pay to the order of: ",
                        F1.name USING L25, SPACE 10,
                        F1.chk_amt USING "**********.99", NL, NL,
                        "Sub total: ", F1.subtot USING "$$$$$$$$$$.99-",
                        SPACE 5, "Grand total: ", F1.gtot USING
                        "$$$$$$$$$$.99-", NL, NL;
                .
                .
                .









        QUINTET                    - 34 -                LOGORDI SA.




        USING                    BQCL Only                     USING




        ALPHANUMERIC FORMAT TABLE
                The following table shows some possible combinations
                of    alphanumeric    data    and   format   control
                specifications. The top row contains  some  possible
                alphanumeric  values.  The left most column contains
                some possible  format  control  specifications.  The
                remainder of the table displays the printed result:



              +-------------------+-------------------+-------------------+
              : "PO BOX 123, NY"  : "LOGORDI SA"      : "PARIS"           :
        +-----+-------------------+-------------------+-------------------+
        : L15 : "PO BOX 123, NY " : "LOGORDI SA     " : "PARIS          " :
        +-----+-------------------+-------------------+-------------------+
        : L5  : "PO BO"           : "LOGOR"           : "PARIS"           :
        +-----+-------------------+-------------------+-------------------+
        : R15 : " PO BOX 123, NY" : "     LOGORDI SA" : "          PARIS" :
        +-----+-------------------+-------------------+-------------------+
        : R5  : "3, NY"           : "DI SA"           : "PARIS"           :
        +-----+-------------------+-------------------+-------------------+


        NUMERIC FORMAT TABLE
                The following table shows some possible combinations
                of  numeric  data and format control specifications.
                The top row contains some possible  numeric  values.
                The  left  most column contains some possible format
                control strings. The remainder of the table displays
                the printed result:


                   +----------+----------+----------+----------+----------+
                   : +199     : -256     : +4567    : +24.45   : +234.345 :
        +----------+----------+----------+----------+----------+----------+
        :  999999  :  000199  :  000256  :  004567  :  000024  :  000234  :
        +----------+----------+----------+----------+----------+----------+
        : +999999  : +000199  : -000256  : +004567  : +000024  : +000234  :
        +----------+----------+----------+----------+----------+----------+
        : -999999  :  000199  : -000256  :  004567  :  000024  :  000234  :
        +----------+----------+----------+----------+----------+----------+
        :  999999+ :  000199+ :  000256- :  004567+ :  000024+ :  000234+ :
        +----------+----------+----------+----------+----------+----------+
        :  999999- :  000199  :  000256- :  004567  :  000024  :  000234  :
        +----------+----------+----------+----------+----------+----------+
        :  999     :  199     :  256     :  567     :  024     :  234     :
        +----------+----------+----------+----------+----------+----------+
        :  BBBBBB  :     199  :     256  :    4567  :      24  :     234  :
        +----------+----------+----------+----------+----------+----------+
        : +BBBBBB  : +   199  : -   256  : +  4567  : +    24  : +   234  :
        +----------+----------+----------+----------+----------+----------+
        : -BBBBBB  :     199  : -   256  :    4567  :      24  :     234  :




        QUINTET                    - 35 -                LOGORDI SA.




        USING                    BQCL Only                     USING




        +----------+----------+----------+----------+----------+----------+
        :  BBBBBB+ :     199+ :     256- :    4567+ :      24+ :     234+ :
        +----------+----------+----------+----------+----------+----------+
        :  BBBBBB- :     199  :     256- :    4567  :      24  :     234  :
        +----------+----------+----------+----------+----------+----------+
        :  BBB     :  199     :  256     :  567     :   24     :  234     :
        +----------+----------+----------+----------+----------+----------+
        :  999.999 :  199.000 :  256.000 :  567.000 :  024.450 :  234.345 :
        +----------+----------+----------+----------+----------+----------+
        :  BBB.BBB :  199.000 :  256.000 :  567.000 :   24.450 :  234.345 :
        +----------+----------+----------+----------+----------+----------+
        : ++++.99  : +199.00  : -256.00  : +567.00  :  +24.45  : +234.35  :
        +----------+----------+----------+----------+----------+----------+
        : ----.99  :  199.00  : -256.00  :  567.00  :   24.45  :  234.35  :
        +----------+----------+----------+----------+----------+----------+
        : $$$$.99  : $199.00  : $256.00  : $567.00  :  $24.45  : $234.35  :
        +----------+----------+----------+----------+----------+----------+
        : $$$$.99+ : $199.00+ : $256.00- : $567.00+ :  $24.45+ : $234.35+ :
        +----------+----------+----------+----------+----------+----------+
        : $$$$.99- : $199.00  : $256.00- : $567.00  :  $24.45  : $234.35  :
        +----------+----------+----------+----------+----------+----------+
        : ****.**  : *199.00  : *256.00  : 4567.00  : **24.45  : *234.35  :
        +----------+----------+----------+----------+----------+----------+
        : ****.**+ : *199.00+ : *256.00- : 4567.00+ : **24.45+ : *234.35+ :
        +----------+----------+----------+----------+----------+----------+
        : ****.**- : *199.00  : *256.00- : 4567.00  : **24.45  : *234.35  :
        +----------+----------+----------+----------+----------+----------+

        SEE ALSO
                PRINT, PAGE, SKIP.


























        QUINTET                    - 36 -                LOGORDI SA.




        AT THE END               BQCL Only                AT THE END




        NAME
                AT THE END - Action to perform at the end of report

        SYNOPSIS
                { AT THE END | ATE }

                        BQCL_statement;
                                .
                                .
                                .
                        BQCL_statement;
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "AT THE END" clause may be used in the  main  or
                any sublist. It will be executed when end of file is
                reached. It is typically used  to  print  totals  or
                check them against other files etc.

        EXAMPLE

                .
                .
                .
                AT THE END
                        $sub_tot_1 : $b_tot;
                        $sub_tot_2 : $g_tot;
                        $grd_tot : $sub_tot_1 + $sub_tot_2;
                        PRINT   STRING(80, "*"), NL,
                                STRING(80, "*"), NL,
                                STRING(80, "*"), NL,
                                NL, NL, "Grand total: ",
                                $grd_tot USING "BBBBBBBBBB-", NL, NL,
                                STRING(80, "*"), NL,
                                STRING(80, "*"), NL,
                                STRING(80, "*"), NL;
                ;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                TITLE PAGE.





        QUINTET                    - 37 -                LOGORDI SA.




        AT THE END               BQCL Only                AT THE END




        BUGS
                It is impossible to access the last record  read  in
                the "AT THE END ... ;" clause within any sublist.





















































        QUINTET                    - 38 -                LOGORDI SA.




        AFTER EACH GROUP OF      BQCL Only       AFTER EACH GROUP OF




        NAME
                AFTER EACH GROUP OF - Designate key break logic

        SYNOPSIS
                { { { AFTER | BEFORE } EACH GROUP OF } |
                        { AEGO | BEGO } }
                                { { NUMERIC "key_part" } |
                                  { ALPHA "key_part"
                                        [ literal_start_pos
                                          literal_sig_chars ] }
                                } [, { { NUMERIC "key_part" } |
                                     { ALPHA "key_part"
                                        [ literal_start_pos
                                          literal_sig_chars ] }
                                } ]
                                .
                                .
                                .
                        ;
                        BQCL_statement;
                        .
                        .
                        .
                        BQCL_statement;
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "AFTER EACH GROUP OF" and "BEFORE EACH GROUP OF"
                clauses allow definition of an action depending on a
                key break while reading records.  A "GROUP"  is  any
                series  of records containing the sorted ordering of
                "key_part".  More  than  one   "key_part"   may   be
                specified.

                The  type  of  "key_part"  must  be  specified  (ie.
                "NUMERIC" or "ALPHA").  If the "key_part" is of type
                "ALPHA"    it    may     preface     an     optional
                "literal_start_pos"  (giving  the starting character
                in "key_part") and a "literal_sig_chars" (giving the
                number   of  bytes  which  are  significant  in  key
                comparisons starting from "literal_start_pos").

                Any number of "key_parts"  may  be  comma  seperated
                giving  a  list  of  zones  which when the generated
                program is executed, are checked  for  a  change  in
                state.  If  any  change (ie. key break) is detected,
                the  "BQCL_statements"  following   the   "key_part"




        QUINTET                    - 39 -                LOGORDI SA.




        AFTER EACH GROUP OF      BQCL Only       AFTER EACH GROUP OF




                definition are executed.

                It  is  important  to  note  that   any   "key_part"
                specified  is not restricted to an actual zone which
                makes up a key sorting. Use of zones in this fashion
                will  produce  random  breaking in most cases and is
                not recommended.

                Normally, more than one "AFTER  EACH  GROUP  OF"  or
                "BEFORE  EACH GROUP OF" clause is used to define key
                breaking logic. Note that the  order  in  which  all
                "AFTER EACH GROUP OF" clauses are defined within any
                list is significant (as for all "BEFORE  EACH  GROUP
                OF"  clauses).  As  each  clause  is encountered, it
                forms a "major" to "minor" key  breaking  structure.
                It  is the programmer's responsibility to define the
                correct key breaking hierarchy.

                It is very important to note the difference  between
                defining seperate key break clauses and defining one
                key break clause with multiple  key  parts.  In  the
                former, the "major" to "minor" logic is enforced. In
                the latter, it is not.

        EXAMPLE

                .
                .
                .
                BEGO ALPHA F1.state
                        PRINT   "Processing state: ",
                                F1.state, NL, NL;
                }
                AEGO ALPHA F1.state
                        PRINT   "State total: ",
                                $s_tot USING "$$$$$$$$$.99-";
                        PAGE;
                }
                AEGO ALPHA F1.city
                        PRINT   "City total: ",
                                $c_tot USING "$$$$$$$$$.99-",
                                NL, NL;
                }
                .
                .
                .

        HINTS
                As a rule,  we  suggest  that  you  define  the  key
                breaking  clause(s) after the "FOR EACH LINE" clause
                in any list you desire.





        QUINTET                    - 40 -                LOGORDI SA.




        AFTER EACH GROUP OF      BQCL Only       AFTER EACH GROUP OF




                The "BEFORE EACH GROUP OF" clause is  normally  used
                to  print  headers  for  the  group  designated. The
                "AFTER EACH GROUP OF"  clause  is  usually  used  to
                print  totals for the designated group. Counters may
                be reset in either clause.

        RETURN VALUE
                None.

        SEE ALSO
                FOR EACH LINE.













































        QUINTET                    - 41 -                LOGORDI SA.




        BLOCK                    OLQCL Only                    BLOCK




        NAME
                BLOCK - Program block structuring

        SYNOPSIS
                BLOCK
                        statement_1;
                        statement_2;
                                .
                                .
                                .
                        statement_N;
                EBLOCK

                {
                        statement_1;
                        statement_2;
                                .
                                .
                                .
                        statement_N;
                }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                The "BLOCK ...  EBLOCK"  OLQCL  sequence  defines  a
                block  of  statements.  Usually these statements are
                grouped together under some other control  structure
                like  "WHILE"  or  "IF".  An alternative form of the
                verbose "BLOCK ... EBLOCK" sequence is the terse 'C'
                like "{ ... }". When statements are grouped together
                within either form of the block structure, they  may
                then be thought of as a module.

        EXAMPLE
                .
                .
                .
                WHILE (&name = F2.name) BLOCK
                        .
                        .
                        .
                EBLOCK
                .
                .
                .
                IF (&name = "Joma") {
                        .
                        .




        QUINTET                    - 42 -                LOGORDI SA.




        BLOCK                    OLQCL Only                    BLOCK




                        .
                }
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                WHILE, BREAK, CONTINUE, DO, IF, ELSE, boolean.













































        QUINTET                    - 43 -                LOGORDI SA.




        CASE()                   BQCL Only                    CASE()




        NAME
                CASE - Conditional test with return value

        SYNOPSIS
                CASE (boolean YES expression_1 NO expression_2)

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "CASE" expression is a very specialized form  of
                conditional  program  control  for batch processing.
                Simply put, the "CASE" expression is another form of
                the "IF ... ELSE ..." expression with the capability
                of returning a  value.  "CASE"  expressions  may  be
                nested.   Type   compatibility  is  checked  between
                "expression_1"  and  "expression_2".  If  they   are
                compatible  then  the  "CASE" expression assumes the
                type of these two expressions  otherwise,  an  error
                message is generated.

        EXAMPLE
                .
                .
                .
                &s_name : CASE (F2.name = F1.name
                                YES     "SAME"
                                NO      CASE (F1.name = F3.name
                                                YES     "SAME"
                                                NO      "DIFFERENT")
                                );
                .
                .
                .
        RETURN VALUE
                Varies according to expression parameters.

        SEE ALSO
                IF, ELSE, boolean.















        QUINTET                    - 44 -                LOGORDI SA.




        CREATE WITH              BQCL Only               CREATE WITH




        NAME
                CREATE WITH - Create a temporary file

        SYNOPSIS
                { CREATE WITH | CW } Fn
                        { { STARTING FROM | SF }
                                { { BEGINNING | BGN } |
                                key_value_expression } }
                        { { NO CONDITION | NC } |
                        { { CONDITION | COND } boolean_expression } }
                                { ASC | DESC } C1: BQCL_statement;
                                        .
                                        .
                                        .
                                { ASC | DESC } C8: BQCL_statement;
                { END OF CREATE | EOC }

                { LOAD RECORD | LR }
                        BQCL_statement;
                                .
                                .
                                .
                        BQCL_statement;
                { END OF LOAD | EOL }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The  "CREATE  WITH"  clause   allows   creation   of
                temporary files. These files may contain up to eight
                zones and each zone is considered part  of  the  key
                sorting.  The "CREATE WITH" clause is similar to the
                "LOAD FROM" clause except that a temporary  file  is
                constucted  from  "Fn" and accessed through the zone
                names "C1...C8". When the generated program finishes
                processing   all   data,  all  temporary  files  are
                deleted.

                The  "STARTING   FROM"   and   "CONDITION"   clauses
                designate  what  records  from  "Fn" are to be read.
                This allows selection of records from "Fn" to create
                records in the temporary file "C".

                As mentioned earlier, the zones which  make  up  the
                "C"  file are all considered prts of the key sorting
                of "C". Each zone (ie.  C1,  C2,  ...,  C8)  may  be
                sorted  in  either ascending (ie. ASC) or descending
                (ie. DESC) order. The zones are specified  in  major
                to minor sorting sequence.




        QUINTET                    - 45 -                LOGORDI SA.




        CREATE WITH              BQCL Only               CREATE WITH




                The "LOAD RECORD ... END OF LOAD" clause must follow
                the "CREATE WITH ... END OF CREATE" clause. Here the
                "C"  record  is  loaded  using  the  conditions  and
                assignments  specified  in the "CREATE WITH" clause.
                The "LOAD RECORD ... END OF LOAD" clause is actually
                a  looping  structure  and  BQCL  statements  may be
                placed here to perform some action for  each  record
                read.

                When using the "CREATE WITH" clause, the  associated
                "FOR EACH LINE" clause must use the "C" record zones
                C1, C2, ..., C8.

                The file created allows duplicate keys.

                Only one "CREATE WITH" clause is  allowed  within  a
                list  or  sublist  and  this excludes the use of the
                "LOAD FROM" clause.

        EXAMPLE

                .
                .
                .
                CREATE WITH F3 STARTING FROM BEGINNING NO CONDITION
                        ASC     C1:     F3.name;
                        ASC     C2:     F3.city;
                        ASC     C3:     F3.zip;
                        ASC     C4:     GETEQ(F1, F1.status, F3.name, "UNKNOWN");
                END OF CREATE
                LOAD RECORD
                        $rec_count : $rec_count + 1;
                END OF LOAD
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                FOR EACH LINE, LOAD FROM.














        QUINTET                    - 46 -                LOGORDI SA.




        END OF OUTPUT            BQCL Only             END OF OUTPUT




        NAME
                END OF OUTPUT - Designate the end of the main
                                list or sublist

        SYNOPSIS
                { END OF OUTPUT | EOO }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "END OF OUTPUT" clause specifies the end of  the
                definition   of  the  "MAIN"  list  or  of  a  given
                "SUBLIST". At least one "END OF  OUTPUT"  clause  is
                required for the "MAIN" list. All sublists must have
                a corresponding "END OF OUTPUT" clause.

        EXAMPLE

                .
                .
                .
                MAIN
                        .
                        .
                        .
                END OF OUTPUT
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                MAIN, SUBLIST FOR.


















        QUINTET                    - 47 -                LOGORDI SA.




        END OF SCRIPT           OLQCL & BQCL           END OF SCRIPT




        NAME
                END OF SCRIPT - Designate end of source code

        SYNOPSIS
                { END OF SCRIPT | EOS }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                The "END OF SCRIPT" clause  designates  the  logical
                end  of a given QUINTET online or batch script file.
                The "END OF SCRIPT" clause is required.

        EXAMPLE

                .
                .
                .
                END OF SCRIPT

        RETURN VALUE
                None.

        SEE ALSO
                BEGINNING.




























        QUINTET                    - 48 -                LOGORDI SA.




        FOR EACH LINE            BQCL Only             FOR EACH LINE




        NAME
                FOR EACH LINE - Extracted record action

        SYNOPSIS
                { FOR EACH LINE | FEL }
                        BQCL_statement;
                        .
                        .
                        .
                        BQCL_statement;
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "FOR EACH LINE" clause  is  used  to  define  an
                action  for  each record that it is called with from
                either the "LOAD  FROM  ...  END  OF  LOAD"  or  the
                "CREATE WITH ... END OF CREATE" clauses. In the case
                of the "LOAD FROM" clause, "FOR EACH LINE" is called
                conditionally.  If  "CREATE WITH" is used, "FOR EACH
                LINE"  is  always  called  (this  implies  that  the
                "CREATE  WITH"  clause should be used to extract the
                appropriate records).

                Only one "FOR EACH LINE"  clause  is  permitted  per
                list or sublist.

                The "FOR EACH LINE ... ;" clause is  typically  used
                to  print  file  zones,  call sublists and increment
                counters (ie. record counters, totals, etc.).

                If the "CREATE WITH" clause is used in  the  current
                list   or   sublist,  then  the  use  of  "Cn"  file
                descriptors must be used.

        EXAMPLE

                .
                .
                .
                /* Used a "LOAD FROM" clause */
                FOR EACH LINE
                        $rec_read : $rec_read + 1;
                        PRINT   F1.name USING L25, SPACE 3,
                                F1.tele USING L14, SPACE 3,
                                F1.addr1 USING L30, NL,
                                SPACE 35, F1.addr2 USING L30, NL, NL
                        ;




        QUINTET                    - 49 -                LOGORDI SA.




        FOR EACH LINE            BQCL Only             FOR EACH LINE




                ;
                .
                .
                .

                .
                .
                .
                /* Used a "CREATE WITH" clause */
                FOR EACH LINE
                        PRINT   C1 USING "$$$$$$$.99", SPACE 3,
                                C2 USING "*****.99", NL, NL
                        ;
                ;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                LOAD FROM, LOAD RECORD, CREATE WITH, PRINT, USING.

































        QUINTET                    - 50 -                LOGORDI SA.




        FOOTING                  BQCL Only                   FOOTING




        NAME
                FOOTING - Define page footing

        SYNOPSIS
                { FOOTING | FTG }

                        BQCL_statement;
                                .
                                .
                                .
                        BQCL_statement;
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "FOOTING" clause may  be  used  to  define  page
                footings  with  automatic  page ejects. The page and
                line  number  counters  ($rgpg  and  $rglcount)  are
                automatically updated.

                Only one "FOOTING ... ;" clause may be  defined  per
                batch program.

        EXAMPLE
                .
                .
                .
                FOOTING
                        PRINT   STRING(80, "-"), NL,
                                "Please see last page for",
                                " account totals...", NL,
                                STRING(80, "-"), NL, NL;
                ;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                HEADING, TITLE PAGE, AT THE END, PRINT, USING.










        QUINTET                    - 51 -                LOGORDI SA.




        HEADING                  BQCL Only                   HEADING




        NAME
                HEADING - Define page heading

        SYNOPSIS
                { HEADING | HDG }

                        BQCL_statement;
                                .
                                .
                                .
                        BQCL_statement;
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "HEADING" clause may  be  used  to  define  page
                headings  with  automatic  page ejects. The page and
                line  number  counters  ($rgpg  and  $rglcount)  are
                automatically updated.

                Only one "HEADING ... ;" clause may be  defined  per
                batch program.

        EXAMPLE
                .
                .
                .
                HEADING
                        PRINT   SPACE 35, "Directory Listing", NL,NL,
                                SPACE 5, "Name", SPACE 20, "Telephone",
                                SPACE 12, "Address", NL, STRING(80, "-"),
                                NL, NL;
                ;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                FOOTING, TITLE PAGE, AT THE END, PRINT, USING.

        BUGS
                The  setting  of  counters  does  no   always   work
                correctly in the "HEADING ... ;" clause.






        QUINTET                    - 52 -                LOGORDI SA.




        IF                       OLQCL Only                       IF




        NAME
                IF - Conditional testing

        SYNOPSIS
                IF boolean
                        statement;

                IF boolean {
                        statement_1;
                        statement_2;
                                .
                                .
                                .
                        statement_N;
                }

                IF boolean
                        statement;
                ELSE
                        statement;

                IF boolean {
                        statement_1;
                        statement_2;
                                .
                                .
                                .
                        statement_N;
                }
                ELSE
                        statement;

                IF boolean {
                        statement_1;
                        statement_2;
                                .
                                .
                                .
                        statement_N;
                }
                ELSE {
                        statement_1;
                        statement_2;
                                .
                                .
                                .
                        statement_N;
                }

        QUINTET ORIGIN
                Origin: Version 1.00





        QUINTET                    - 53 -                LOGORDI SA.




        IF                       OLQCL Only                       IF




                Internal Representation:        'C' equivalent

        DESCRIPTION
                The OLQCL "IF ... ELSE" control flow statements give
                you  the  ability  to  conditionally  branch through
                program logic depending upon "boolean".  The  "ELSE"
                clause  is  optional.  This construct may be nested.
                Because the "ELSE" part  of  an  "IF  ...  ELSE"  is
                optional,  there  is  an ambiguity when an "ELSE" is
                omitted from a nested "IF" sequence.  In  this  case
                the  "ELSE"  is associated with the closest previous
                "ELSE"-less "IF".

        EXAMPLE
                .
                .
                .
                IF &name = F1.name {
                        .
                        .
                        .
                }
                .
                .
                .
                IF ((&name = F1.name OR &name = F2.name) AND
                        (F1.name <> F2.name)) {
                        .
                        .
                        .
                }
                ELSE
                        .
                        .
                        .
                }
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                BLOCK, WHILE, BREAK, CONTINUE, DO, SWITCH, boolean.











        QUINTET                    - 54 -                LOGORDI SA.




        INPUTS                   BQCL Only                    INPUTS




        NAME
                INPUTS - Get input from terminal

        SYNOPSIS
                INPUTS
                        "prompt_literal_string", { & | $ }var;
                        .
                        .
                        .
                        "prompt_literal_string", { & | $ }var;
                { END OF INPUTS | EOI }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function (scanf())

        DESCRIPTION
                The "INPUTS" clause provides a  useful  way  to  get
                input  from  the  user's terminal when the genearted
                batch program is executed. Each input is defined  by
                giving  a  "prompt_literal_string"  followed  by the
                variable to  be  loaded.  String  and  numeric  user
                defined variables may be used.

                There is no limit on the number of inputs.

        EXAMPLE

                .
                .
                .
                INPUTS
                        "Please give me the name of the spooler: ", &spooler;
                END OF INPUTS
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                string, numeric.

        BUGS
                There is no way to verify the validity of the  input
                variables.

                Because of the generation of a "scanf()"  statement,
                it is possible to have a "core dump" if the input is
                to a numeric  variable  and  the  user  enters  non-




        QUINTET                    - 55 -                LOGORDI SA.




        INPUTS                   BQCL Only                    INPUTS




                numeric  data to the prompt. This bug only occurs on
                some machines.






















































        QUINTET                    - 56 -                LOGORDI SA.




        LOAD FROM                BQCL Only                 LOAD FROM




        NAME
                LOAD FROM - Load records from a file

        SYNOPSIS
                { LOAD FROM | LF } Fn

                        { { STARTING FROM | SF }
                                { { BEGINNING | BGN } |
                                key_value_expression } }

                        { { NO CONDITION | NC } |
                        { { CONDITION | COND } boolean_expression } }

                        BQCL_statement;
                                .
                                .
                                .
                        BQCL_statement;
                { END OF LOAD | EOL }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "LOAD FROM" clause defines the  access  to  file
                "Fn".  A starting condition as well as any condition
                for reading all records may be defined. Use  of  the
                "LOAD  FROM"  clause  is  mandatory in all generated
                batch programs.

                The "LOAD FROM ... END OF LOAD" clause forms a block
                of   code  which  is  itself  a  looping  structure.
                Implicit in this looping structure is a call to  the
                "FOR  EACH LINE ... ;" clause which is executed only
                if "NO CONDITION" was specified or if  a  "CONDITION
                boolean_expression"    was    specified    and   the
                "boolean_expression" evaluates to "TRUE". This  loop
                continues  until  the  end  of file is reached. This
                construction allows reading of all  records  in  the
                file.  Beware  that  this  can also lead to a rather
                lengthy execution time if the file is very large and
                only a subset of records are desired.  Remember that
                if a "CONDITION boolean_expression" is specified  it
                only controls the call of the "FOR EACH LINE" clause
                and DOES NOT itself constitute a "break" or  end  of
                file   condition.  The  reading  of  the  file  will
                continue until end of file is reached.

                The "STARTING FROM" clause may  preface  either  the
                keyword  "BEGINNING"  which  will force reading from




        QUINTET                    - 57 -                LOGORDI SA.




        LOAD FROM                BQCL Only                 LOAD FROM




                the beginning of file or  a  "key_value_expression".
                The  "key_value_expression"  may  be  any expression
                which evaluates to a type  which  is  equal  to  the
                first  key  part  of the key defined in the "PREPARE
                ... END OF PREPARE" clause for "Fn".

                The "NO CONDITION" clause forces a call to the  "FOR
                EACH  LINE  ...  ;" clause for each and every record
                read from "Fn".

                The   "CONDITION   boolean_expression"   clause   is
                executed  each time the body of the loop is executed
                and if "boolean_expression" evaluates to "TRUE" then
                the  "FOR  EACH  LINE  ...  ;" will be executed. The
                "boolean_expression" may contain any combination  of
                boolean  operators  and operands. Parenthesis may be
                used.

                A series of one or more  "BQCL_statement's"  may  be
                included        following       the       "CONDITION
                boolean_expression" or "NO CONDITION" clauses. These
                statements  will  be  executed for each iteration of
                the "LOAD FROM ... END OF LOAD" loop. This is  where
                it  is  possible  to define a "break" from the loop.
                The  procedure  is  demonstrated  by  the  following
                example.

        EXAMPLE
                .
                .
                .
                LOAD FROM
                        F2 STARTING FROM F1.name CONDITION F1.name = F2.name
                        SWITCH 1: F1.name <> F2.name
                                START(F2, "qf2k1", 0, LAST);
                        ESWITCH
                END OF LOAD
                .
                .
                .

        RETURN VALUE
                None.

        TIPS
                Normally, you should not reset any counters  in  the
                "LOAD  FROM" clause as the loop is executed for each
                record read.

        SEE ALSO
                CREATE WITH, START(), CASE, PREPARE, FOR EACH  LINE,
                SWITCH.




        QUINTET                    - 58 -                LOGORDI SA.




        LOAD FROM                BQCL Only                 LOAD FROM




























































        QUINTET                    - 59 -                LOGORDI SA.




        MAIN                     BQCL Only                      MAIN




        NAME
                MAIN - Definition of main list

        SYNOPSIS
                MAIN
                        BQCL_statement;
                        .
                        .
                        .
                        BQCL_statement;
                { END OF OUTPUT | EOO }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "MAIN" clause defines the master or main list in
                a generated batch program. Only one "MAIN" clause is
                allowed but is required in all batch  programs.  All
                coding within the "MAIN ... END OF OUTPUT" (the last
                "END OF OUTPUT") block is considered the main  list.
                The "MAIN ... END OF OUTPUT" clause must contain one
                and only one instance of either the "LOAD  FROM"  or
                "CREATE WITH" clause.

        EXAMPLE

                .
                .
                .
                MAIN
                        .
                        .
                        .
                END OF OUTPUT
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                LOAD FROM,  CREATE  WITH,  END  OF  OUTPUT,  RETURN,
                SUBLIST.









        QUINTET                    - 60 -                LOGORDI SA.




        RETURN                   BQCL Only                    RETURN




        NAME
                RETURN - Call a sublist and specify type of
                         return value

        SYNOPSIS
                (DUMMY) RETURN n, $dummy_var;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "RETURN" clause invokes a call the  the  sublist
                "n".  "n"  must  be  between  one  and  twenty.  The
                "(DUMMY)" clause is required as well as some "dummy"
                return variable.

        EXAMPLE

                .
                .
                .
                (DUMMY) RETURN 1, $dummy;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                SUBLIST.























        QUINTET                    - 61 -                LOGORDI SA.




        SUBLIST                  BQCL Only                   SUBLIST




        NAME
                SUBLIST - Define sublist function

        SYNOPSIS
                { SUBLIST | SL } n
                        BQCL_statement;
                        .
                        .
                        .
                        BQCL_statement;
                        { FORMAT FOR RETURN | FFR }
                        BQCL_statement;
                        .
                        .
                        .
                        BQCL_statement;
                { END OF OUTPUT | EOO }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                The "SUBLIST n" clause  enables  the  use  of  slave
                files  in  batch program design. They may be thought
                of as  sub-procedures  or  functions  to  perform  a
                specific  task  (ie. print all records with the same
                key as the  current  file  in  a  slave  file).  The
                integer  "n"  must  be  between  one  and twenty.  A
                "SUBLIST" follows most of the rules  of  the  "MAIN"
                list with the following exceptions:


                -       The "FORMAT FOR RETURN" clause  is  required
                        in a "SUBLIST" definition.

                -       The "TITLE PAGE" clause is not allowed in  a
                        "SUBLIST".

                -       The "HEADING" and "FOOTING" clauses are  not
                        allowed in a "SUBLIST".


                The "SUBLIST ... END OF OUTPUT" clause must  contain
                one  and only one instance of either the "LOAD FROM"
                or "CREATE WITH" clause.
        EXAMPLE

                .
                .
                .




        QUINTET                    - 62 -                LOGORDI SA.




        SUBLIST                  BQCL Only                   SUBLIST




                (DUMMY) RETURN 1, $dummy;
                F1.total : $f2_rec_read;
                .
                .
                .
                /* Define sublist one. Keep running count of    */
                /* the records which satisfied COND.            */
                SUBLIST 1
                        LOAD FROM
                                F2 STARTING FROM F1.name
                                CONDITION F1.name = F2.name
                                SWITCH 1: F1.name <> F2.name
                                        START(F2, "qf2k1", 0, LAST);
                                ESWITCH
                        END OF LOAD
                        FORMAT FOR RETURN
                        FOR EACH LINE
                                $f2_rec_read : $f2_rec_read + 1;
                                PRINT   SPACE 44, F2.tele
                                        USING L18, NL;
                        ;
                END OF OUTPUT
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                RETURN, MAIN, LOAD FROM, CREATE WITH, AT THE END.

























        QUINTET                    - 63 -                LOGORDI SA.




        SWITCH                   BQCL Only                    SWITCH




        NAME
                SWITCH - Batch conditional testing

        SYNOPSIS
                SWITCH  1: boolean
                                statement_1;
                                statement_2;
                                        .
                                        .
                                        .
                                statement_N;
                        2: boolean
                                statement_1;
                                statement_2;
                                        .
                                        .
                                        .
                                statement_N;
                        .
                        .
                        .
                        N: boolean
                                statement_1;
                                statement_2;
                                        .
                                        .
                                        .
                                statement_N;
                ESWITCH

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                The  "SWITCH  ...  ESWITCH"  BQCL  sequence   allows
                multi-way  decision  making.  It can be used in much
                the same way as the "IF ... ELSE" construct  in  the
                OLQCL.

        EXAMPLE
                .
                .
                .
                SWITCH  1: &name = F1.name
                                .
                                .
                                .
                        2: (&name = F2.name) AND (&name <> F1.name)
                                .
                                .




        QUINTET                    - 64 -                LOGORDI SA.




        SWITCH                   BQCL Only                    SWITCH




                                .
                ESWITCH
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                WHILE, BREAK, CONTINUE, DO, IF, ELSE, boolean.

        BUGS
                If you fail to specify the  "ESWITCH"  keyword,  the
                next  "END  OF  OUTPUT"  is  misinterpreted  as  the
                missing "ESWITCH" keyword. The translator  continues
                without   warning.   The   error   is  trapped  when
                compilation  is  attempted.   Normally,  the   error
                generated by the 'C' compiler is some kind of syntax
                error but, the line on which the error occurs on  is
                usually  not  at  the  location of the generated 'C'
                "switch" statement. This bug  will  be  fixed  in  a
                future release.

                It is not possible to have a switch within a switch.































        QUINTET                    - 65 -                LOGORDI SA.




        TITLE PAGE               BQCL Only                TITLE PAGE




        NAME
                TITLE PAGE - Print a report title page

        SYNOPSIS
                { TITLE PAGE | TP }

                        BQCL_statement;
                                .
                                .
                                .
                        BQCL_statement;
                ;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                "TITLE PAGE" may be used to generate a report  title
                page.  It  is  only  executed one time. Although the
                "TITLE PAGE ... ;" block is normally used  to  print
                something,  it  may  also  be used to perform report
                initialization, etc.

                The "TITLE PAGE" clause must be  defined  after  any
                "INPUTS" and "PREPARE" clauses.

        EXAMPLE

                .
                .
                .
                TITLE PAGE
                        PRINT   STRING(80, "*"), NL,
                                STRING(80, "*"), NL,
                                STRING(80, "*"), NL,
                                NL, NL, "Date: ",
                                $rgmm USING "99", "/",
                                $rgdd USING "99", "/",
                                $rgyy USING "99", NL, NL,
                                STRING(80, "*"), NL,
                                STRING(80, "*"), NL,
                                STRING(80, "*"), NL;
                ;
                .
                .
                .

        RETURN VALUE
                None.





        QUINTET                    - 66 -                LOGORDI SA.




        TITLE PAGE               BQCL Only                TITLE PAGE




        SEE ALSO
                AT THE END, PRINT, USING, PAGE, STRING().

        BUGS
                If you are using "TITLE PAGE" to generate output and
                the  left  margin is to be shifted to the right (via
                $rglfm), the first line of the title page  will  not
                be  at the correct column specified (it is always at
                column 1).

                If you do not do any printing in  the  "TITLE  PAGE"
                code  block,  a  page  is  still  ejected before the
                report proper is printed.











































        QUINTET                    - 67 -                LOGORDI SA.




        WHILE                    OLQCL Only                    WHILE




        NAME
                WHILE - Looping program control

        SYNOPSIS
                WHILE boolean
                        statement;

                WHILE boolean {
                        statement_1;
                        statement_2;
                                .
                                .
                        [ BREAK ]
                                .
                                .
                                .
                        [ CONTINUE ]
                                .
                                .
                                .
                        statement_N;
                }

                DO {
                        statement_1;
                        statement_2;
                                .
                                .
                        [ BREAK ]
                                .
                                .
                                .
                        [ CONTINUE ]
                                .
                                .
                                .
                        statement_N;
                } WHILE boolean;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                The "WHILE" looping construction  allows  continuous
                repetition of OLQCL code. In the first two forms the
                body of the "WHILE" loop may not be executed if  the
                boolean  "boolean"  is  false.  In the last form the
                body of the "DO ... WHILE" loop is executed at least
                once.  "WHILE"  and "DO ... WHILE" structures may be
                nested.




        QUINTET                    - 68 -                LOGORDI SA.




        WHILE                    OLQCL Only                    WHILE




                Two optional keywords may be used to further control
                the  behaviour of the loop. The "BREAK" keyword when
                executed,  exits  from  the  most  recently  defined
                "WHILE"  or  "DO  ...  WHILE"  loop.  The "CONTINUE"
                keyword when executed, causes control to  be  passed
                directly  to  the  test  of  the boolean in the most
                recently defined "WHILE" or "DO ... WHILE" loop.

        EXAMPLE
                .
                .
                .
                WHILE (&name = F2.name) {
                        .
                        .
                        .
                        IF (ISERRNO <> 0)
                                BREAK;
                        ELSE
                                CONTINUE;
                }
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                IF, ELSE, boolean.


























        QUINTET                    - 69 -                LOGORDI SA.




        boolean                 OLQCL & BQCL                 boolean




        NAME
                Boolean - Conditional operators and constants

        SYNOPSIS
                AND, OR, =, >, <, >=, <=, <>

                TRUE, FALSE

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                Conditional expressions are used to control  program
                flow.  User  defined  variables may be compared with
                each other or with system variables. The two boolean
                constants  "TRUE"  and  "FALSE" are also provided to
                assist in program design and readability. There  are
                standard  operator  precedence  rules  which  may be
                overridden by parenthesizing the expression.

                The precedence of boolean operators  is  defined  in
                decreasing priority and grouped left-to-right by the
                following rules:


                        <       >       <=      >=

                        =       <>

                        AND     OR


                The two boolean constants "TRUE" and "FALSE" may  be
                used to control program flow.

        EXAMPLE
                .
                .
                .
                IF ((&name <> F1.name) OR (F1.name = F2.name)) {
                        WHILE (TRUE) {
                                .
                                .
                                .
                                IF (ISERRNO = EENDFILE)
                                        BREAK;
                                .
                                .
                                .
                        }




        QUINTET                    - 70 -                LOGORDI SA.




        boolean                 OLQCL & BQCL                 boolean




                }
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                IF, ELSE, BLOCK, WHILE, BREAK, CONTINUE, DO, SWITCH.














































        QUINTET                    - 71 -                LOGORDI SA.




        CALLWIN()                OLQCL Only                CALLWIN()




        NAME
                CALLWIN - Call an existing sub-window

        SYNOPSIS
                CALLWIN(window_number)
                VAR     window_number;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "CALLWIN" invokes  an  existing  sub-window  in  the
                current tree of screens.  As each window in the tree
                of  screens  may  have  up  to   nine   sub-windows,
                "window_number"  must  have  a value between one and
                nine. If  the  "window_number"  specified  does  not
                correspond  to  any  existing  sub-window,  an error
                message will be generated at run time.

                "CALLWIN" actually calls the sub-window at the  time
                of  invocation just as if the user asked to enter it
                from the keyboard.  It is  the  recommended  way  of
                automatically  calling  sub-windows. Previously, the
                function "PUTCOM" was used to perform this function.
                We  recommend  that any existing OLQCL scripts which
                use "PUTCOM" to implement sub-window  invocation  be
                modified  to  use  "CALLWIN".  The function "PUTCOM"
                will be removed in future releases.

        EXAMPLE
                .
                .
                .
                CALLWIN(2);
                .
                .
                .

        RETURN VALUE
                None.














        QUINTET                    - 72 -                LOGORDI SA.




        CLEARM()                 OLQCL Only                 CLEARM()




        NAME
                CLEARM - Erase a line on the user's terminal

        SYNOPSIS
                CLEARM(line, column, length)

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                CLEARM will clear an  area  on  the  user's  current
                virtual  window  starting at "line" and "column" for
                "length" many characters. The effects of the call to
                "CLEARM"  will  be  seen  by  the user when the next
                "REDRAW" is executed. That means multiple  calls  to
                "CLEARM"  may  be made without actually updating the
                user's physical screen.

        EXAMPLE
                .
                .
                .
                CLEARM(10, 10, 50);     /* Clear three lines */
                CLEARM(11, 10, 50);
                CLEARM(12, 10, 50);
                REDRAW;                 /* Update physical screen */
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                REDRAW, CLRSCR, CREWIN, DELWIN, WINDOW.

        BUGS
                At the present time, the coordinates are not checked
                for  validity  against  the  user's  current virtual
                window. Also the length  specified  may  be  greater
                than  the  width  remaining  from  "column"  to  the
                rightmost coordinate of the user's  current  virtual
                window.  If either situation occurs, strange results
                may occur  at  run  time.  Be  sure  to  check  your
                coordinates and length for validity.









        QUINTET                    - 73 -                LOGORDI SA.




        CLRSCR                   OLQCL Only                   CLRSCR




        NAME
                CLRSCR - Clear the user's current virtual window

        SYNOPSIS
                CLRSCR

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "CLRSCR"  will  clear  the  user's  current  virtual
                window.  All  the  contents  within  that window are
                lost. The effect of the call  to  "CLRSCR"  will  be
                seen on the user's current physical window after the
                next call to "REDRAW".

        EXAMPLE
                .
                .
                .
                CLRSCR; /* Clear virtual window */
                REDRAW; /* Update physical window */
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                CLEARM(), CREWIN(), DELWIN, REDRAW, REPAINT, WINDOW.























        QUINTET                    - 74 -                LOGORDI SA.




        CREWIN()                 OLQCL Only                 CREWIN()




        NAME
                CREWIN - Create a new window

        SYNOPSIS
                CREWIN(line_1, column_1, line_2, column_2)
                VAR     line_1;
                VAR     column_1;
                VAR     line_2;
                VAR     column_2;


        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "CREWIN" will create a new window whose  coordinates
                are  bounded  by  the parameters (line_1, column_1),
                (line_2, column_2). These coordinate couples  define
                the  upper left hand and lower right hand corners of
                the window. The coordinates  must  be  specified  in
                absolute  location  on  the  physical  screen.  Each
                window created may be of any size as long as it will
                fit inside the terminal's physical screen.

                The "CREWIN" command will clear the  area  specified
                as  well  as  draw a box in semi-graphics characters
                bounding  the   window   created.   This   area   is
                represented  internally  in  the window program as a
                memory  buffer  which  is  stacked  on  top  of  any
                previously    allocated   windows.   This   stacking
                technique is also portrayed on the  user's  physical
                screen  as  window  overlays.  The  contents  of any
                windows under the one just created are preserved.

                Attempts to create a window which will  lie  outside
                the  terminal's  physical  screen  will result in an
                error message generated at run time.

                The standard output stream is flushed.

        EXAMPLE
                .
                .
                .
                CREWIN(10, 10, 14, 70); /* Allocate window */
                XYDISP(12, 12, RV,      /* Display message */
                        "Created a new window at (10, 10), (14, 70).");
                REDRAW;
                MESSAGE("");    /* Stop user */
                DELWIN;         /* Delete this window */




        QUINTET                    - 75 -                LOGORDI SA.




        CREWIN()                 OLQCL Only                 CREWIN()




                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                LINES,  COLS,  DELWIN,  REDRAW,  CLRSCR,   XYDISP(),
                XYINPUT(), window.














































        QUINTET                    - 76 -                LOGORDI SA.




        DELWIN                   OLQCL Only                   DELWIN




        NAME
                DELWIN - Delete the current virtual and physical window

        SYNOPSIS
                DELWIN;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "DELWIN" removes from memory and the user's physical
                screen  the  current  (i.e. most recently allocated)
                window. The memory used by this window is freed. Any
                existing  windows  which  were  under  this  deleted
                window have their contents restored  to  the  user's
                physical  screen.  The  previously  allocated window
                then becomes the current window.

                The standard output stream is flushed.

        EXAMPLE
                .
                .
                .
                DELWIN;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                LINES, COLS,  CREWIN(),  REDRAW,  CLRSCR,  XYDISP(),
                XYINPUT(), window.

        BUGS
                It is a ghastly error to "DELWIN" more windows  than
                desired.  If  you  do  this, very strange things are
                sure to happen at run time.














        QUINTET                    - 77 -                LOGORDI SA.




        ERROR()                  OLQCL Only                  ERROR()




        NAME
                ERROR - Print an error message on the user's terminal

        SYNOPSIS
                { ERROR | ERR } (string, field_name)
                STRING  string;
                VAR     field_name;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                Message prints a string of characters  on  the  last
                line  of  the user's terminal.  The string passed as
                the only parameter will be displayed followed by the
                prompt  "[Hit  Return  to  Continue]". The user must
                then press the <RETURN> key  to  continue  with  his
                work.  If  the length of "string" plus the length of
                the prompt is greater than the width of the physical
                screen,  "string" will be truncated.  After the user
                presses <RETURN>, the message is erased.

                If the global isam error indicator ISERRNO  contains
                some  other  value  than zero, it will automatically
                proceed "string" during the display.

                The second parameter  "field_name"  specifies  which
                field  to  position  the  cursor  on  after the user
                presses the <RETURN> key.  The  user  will  then  be
                forced to enter the data to "field_name" again.

        WARNING
                Scripts which call "ERROR" are recursively  defined.
                That  means  that  the  script will call itself each
                time  "ERROR"  is  executed.  To   avoid   executing
                remaining  code more than one time, judicious use of
                the "IF ... ELSE  ..."  structure  should  be  used.
                Failure  to  do  so may result in strange results at
                run time.

        EXAMPLE
                .
                .
                .
                IF (month < 1 OR month > 12) {
                        ISERRNO : 0;
                        ERROR("Invalid month entered, use [1..12].", month);
                }
                ELSE {  /* Normal processing */
                        .




        QUINTET                    - 78 -                LOGORDI SA.




        ERROR()                  OLQCL Only                  ERROR()




                        .
                        .
                }
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                MESSAGE().

        BUGS
                If ISERRNO contains some old or useless information,
                it  will  be displayed along with "string". This can
                lead to some confusion among end users as the  value
                of  ISERRNO  might be misinterpreted. Currently, the
                only solution to this  problem  is  to  include  the
                statement   "ISERRNO   :  0;"  before  the  call  to
                "ERROR()" if you do not want to show  the  value  of
                ISERRNO.

                Because of the recursive  nature  of  scripts  which
                call  "ERROR",  use  of  the <EXIT> function key (in
                most cases F2) to exit the current mode  only  works
                for the first call to the script.





























        QUINTET                    - 79 -                LOGORDI SA.




        FUNCTION()               OLQCL Only               FUNCTION()




        NAME
                FUNCTION - Simulate function key action

        SYNOPSIS
                FUNCTION(string)
                STRING  string;

        QUINTET ORIGIN
                Origin: Version 1.11

                Internal Representation:        Function

        DESCRIPTION
                "FUNCTION" simulates the action of a  function  key.
                "string"  be  chosen  from  the  following  list  of
                character codes:


                        UP      UP-ARROW key.

                        DOWN    DOWN-ARROW key.

                        LEFT    LEFT-ARROW key.

                        RIGHT   RIGHT-ARROW key.

                        PS      NEXT-PAGE key (ex. F3).

                        PP      PREVIOUS-PAGE key (ex. F4).

                        SELECTION       SELECTION key (ex. F6).


                It is important to  note  that  the  action  of  the
                simulated  function  key may not take place when the
                call to "FUNCTION" is actually invoked. All requests
                placed  by  calls  to "FUNCTION" are queued and when
                the Automat is ready to read data from the keyboard,
                the queue is searched for any pending data. If there
                is something on the queue  it  is  read  before  any
                input is accepted from the keyboard.

        EXAMPLE
                .
                .
                .
                FUNCTION(LEFT);
                .
                .
                .

        RETURN VALUE




        QUINTET                    - 80 -                LOGORDI SA.




        FUNCTION()               OLQCL Only               FUNCTION()




                None.

        SEE ALSO
                KEYBOARD().




















































        QUINTET                    - 81 -                LOGORDI SA.




        KEYBOARD()               OLQCL Only               KEYBOARD()




        NAME
                KEYBOARD - Simulate keyboard action

        SYNOPSIS
                { KEYBOARD | KEYB } (string_literal)
                STRING  string_literal;

        QUINTET ORIGIN
                Origin: Version 1.11

                Internal Representation:        Function

        DESCRIPTION
                "KEYBOARD" simulates data entry from the  end  user.
                "string_literal"   may  be  any  sequence  of  ascii
                characters   including   the   following   character
                constants:


                 '\b'   backspace
                 '\n'   line feed
                 '\r'   carriage return
                 '\t'   tab
                 '\'    slash
                 \"     double quote
                 '\N'   the 8-bit character whose ASCII code is  the
                        1-, 2- or 3-digit octal number N, which must
                        start with a zero.


        EXAMPLE

                .
                .
                .
                KEYBOARD("Account overdue7");
                .
                .
                .


        RETURN VALUE
                None.

        SEE ALSO
                FUNCTION().










        QUINTET                    - 82 -                LOGORDI SA.




        MESSAGE()                OLQCL Only                MESSAGE()




        NAME
                MESSAGE - Print a message on the user's terminal

        SYNOPSIS
                { MESSAGE | MSG } (string)
                STRING  string;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                Message prints a string of characters  on  the  last
                line  of  the user's terminal.  The string passed as
                the only parameter will be displayed followed by the
                prompt  "[Hit  Return  to  Continue]". The user must
                then press the <RETURN> key  to  continue  with  his
                work.  If  the length of "string" plus the length of
                the prompt is greater than the width of the physical
                screen,  "string" will be truncated.  After the user
                presses <RETURN>, the message is erased.

                If the global isam error indicator ISERRNO  contains
                some  other  value  than zero, it will automatically
                preceed "string" during the display.

        EXAMPLE
                .
                .
                .
                MESSAGE("WARNING: Processing classified information.");
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                ERROR().

        BUGS
                If ISERRNO contains some old or useless information,
                it  will  be displayed along with "string". This can
                lead to some confusion amoung end users as the value
                of  ISERRNO  might be misinterpreted. Currently, the
                only solution to this  problem  is  to  include  the
                statement   "ISERRNO   :  0;"  before  the  call  to
                "MESSAGE()" if you do not want to show the value  of
                ISERRNO.





        QUINTET                    - 83 -                LOGORDI SA.




        READ()                   OLQCL Only                   READ()




        NAME
                READ - Read in a field within the current window

        SYNOPSIS
                { READ | INPUT } (field_name)
                VAR     field_name;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "READ" allows you to force the user  to  enter  data
                for  the  named  field  in  the  current window. The
                cursor is positioned on the named field and the user
                must then enter some data to the field.

        EXAMPLE
                .
                .
                .
                READ(name);
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                TOUCH(), REPAINT(), SET().
























        QUINTET                    - 84 -                LOGORDI SA.




        REDRAW                   OLQCL Only                   REDRAW




        NAME
                REDRAW - Refresh the current physical window

        SYNOPSIS
                REDRAW;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "REDRAW" will refresh any new data contained in  the
                current  virtual  window  on the terminal's physical
                window. If there is no new data, this command has no
                visible  effect.  After the refresh, all data in the
                current virtual window is flagged as old.

                The standard output stream is flushed.

        EXAMPLE
                .
                .
                .
                CLRSCR;
                XYDISP(11, 12, RV,
                        "Please do not disturb the terminal.");
                XYDISP(12, 12, RV,
                        "Accounting totals are being prepared.");
                REDRAW;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                LINES,  COLS,  CREWIN,  DELWIN,  CLRSCR,   XYDISP(),
                XYINPUT(), window.
















        QUINTET                    - 85 -                LOGORDI SA.




        REPAINT                  OLQCL Only                  REPAINT




        NAME
                REPAINT - Redraw all fields in the current window

        SYNOPSIS
                REPAINT

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                "REPAINT" will refresh all the fields in the current
                physical window.  Calling "REPAINT" is equivalent to
                calling "TOUCH" for all fields except that only  one
                "REDRAW"  takes  place.  Any pending data within the
                current virtual window will also be refreshed.

                The standard output stream is flushed.

        EXAMPLE
                .
                .
                .
                date : &udate;
                total : sub1 + sub2 + sub3;
                REPAINT;
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                SET(), TOUCH().




















        QUINTET                    - 86 -                LOGORDI SA.




        SET()                    OLQCL Only                    SET()




        NAME
                SET - Change a field's attribute(s) at run time

        SYNOPSIS
                SET(field_name, [!]att)
                VAR     field_name;
                VAR     att;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "SET"  allows  the   modification   of   a   field's
                attributes  at  execution  time.   "field_name" must
                exist in the current window. The attribute  must  be
                chosen  from  the  following  list  of two character
                codes:


                        VN      Normal Video.

                        LV      Low Video.

                        RV      Reverse Video.

                        BK      Blinking video.

                        UL      Underline video.

                        KY      Key Field.

                        NA      Not Accessable.

                        RD      Required.

                        RT      Not accessible from the right.

                        UP      Not accessible from above.

                        LT      Not accessible from the left.

                        DN      Not accessible from below.


                        If the attribute specified is of  the  video
                        type, a call to "TOUCH" is necessary to make
                        the video attribute visible  on  the  user's
                        current physical window. This is because the
                        actual  call  to  "SET"  only  modifies  the
                        field's   internal   attributes   (i.e.   in




        QUINTET                    - 87 -                LOGORDI SA.




        SET()                    OLQCL Only                    SET()




                        memory).

                        By  placing  the  optional  NOT  symbol  "!"
                        before   the   attribute  parameter,  it  is
                        possible to turn  off  that  attribute.  All
                        other attributes will remain as before.

                        If  you  terminal  supports  multiple  video
                        attributes,  it  is possible to combine more
                        than one video attribute (ex.  blinking  and
                        reverse  video).   If  you terminal does not
                        support multiple video  attributes,  consult
                        the   documentation   supplied  with  it  to
                        determine which attributes have the  highest
                        priority as this may affect which attributes
                        you will use with the "SET" command.

        EXAMPLE
                .
                .
                .
                total : sub1 + sub2 + sub3;
                IF (total < 0.0) {      /* If DEBIT set BLINKING */
                        SET(total, BK);
                        TOUCH(total);
                }
                ELSE {
                        SET(total, !BK);
                        TOUCH(total);
                }
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                TOUCH(), REPAINT().

















        QUINTET                    - 88 -                LOGORDI SA.




        TOUCH()                  OLQCL Only                  TOUCH()




        NAME
                TOUCH - Update a field in the physical window

        SYNOPSIS
                TOUCH(field_name)
                VAR     field_name;

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Function

        DESCRIPTION
                "TOUCH" displays the contents of "field_name" in the
                correct  position  within  the  current window. This
                function is normally used to display the results  of
                some numeric computation or string manipulation. The
                value of "field_name" is displayed  on  the  current
                virtual   window   and   an   internal  "REDRAW"  is
                generated.  Any  pending  data  within  the  current
                virtual window will also be refreshed.

                The standard output stream is flushed.

        EXAMPLE
                .
                .
                .
                TOUP(name);
                TOUCH(name);
                .
                .
                .
                total : total + subt;
                TOUCH(total);
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                SET(), REPAINT.












        QUINTET                    - 89 -                LOGORDI SA.




        XYDISP()                 OLQCL Only                 XYDISP()




        NAME
                XYDISP - Print something in the current window.

        SYNOPSIS
                XYDISP(line, column, video_att, var_name)
                VAR     line;
                VAR     column;
                VAR     video_att;
                VAR     var_name;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "XYDISP" will display a string of characters at  the
                coordinates  "line"  and  "column"  with  the  video
                attribute "video_att". "video_att" is  required  and
                must  be  selected  from  one  of  the following two
                character codes:


                        VN      Normal Video.

                        LV      Low Video.

                        RV      Reverse Video.

                        BK      Blinking Video.

                        UL      Underline Video.


        "line" and "column" designate the coordinates of  where  the
        character  string  will be printed. The string is printed in
        the users's virtual window. To actually force  the  printing
        of  the  string  on  the  user's  physical window it will be
        necessary to call "REDRAW" to refresh the screen.

        EXAMPLE
                .
                .
                .
                CREWIN(5, 10, 10, 70);
                XYDISP(7, 12, RV, "DO NOT DISTURB THIS TERMINAL");
                XYDISP(8, 12, LV, &utime);
                REDRAW;
                .
                .
                .





        QUINTET                    - 90 -                LOGORDI SA.




        XYDISP()                 OLQCL Only                 XYDISP()




        RETURN VALUE
                None.

        SEE ALSO
                XYINPUT(),   REDRAW,   CLRSCR,   DELWIN,   CREWIN(),
                CLEARM(), window.

        BUGS
                If you have a version of QUINTET that  is  V2.05  or
                older,  only display of character strings is sure to
                work.

                The coordinates are not checked for  validity.  That
                means  it is possible to position the cursor outside
                the current virtual window. If this happens  strange
                results will occur.

                The length of  the  string  to  be  printed  is  not
                checked  for  validity. That means it is possible to
                print something outside the current virtual  window.
                If this happens strange results will occur.



































        QUINTET                    - 91 -                LOGORDI SA.




        XYINPUT()                OLQCL Only                XYINPUT()




        NAME
                XYINPUT - Get data from user's window.

        SYNOPSIS
                XYINPUT(line, column, video_att, var_name[, length])
                VAR     line;
                VAR     column;
                VAR     video_att;
                VAR     var_name;
                VAR     length;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "XYINPUT" will display a string of characters at the
                coordinates  "line"  and  "column"  with  the  video
                attribute "video_att" prompting the  user  to  enter
                data.   "video_att" is required and must be selected
                from one of the following two character codes:


                        VN      (V)ideo (N)ormal.

                        LV      (L)ow (V)ideo.

                        RV      (R)everse (V)ideo.

                        BK      (B)lin(K)ing video.

                        UL      (U)nder(L)ine video.


        "line" and "column" designate the coordinates of  where  the
        character  string  will be printed. The string is printed in
        the users's physical window. It is therefor not necessary to
        call "REDRAW" to update the user's screen.  Any pending data
        within the current virtual window will also be refreshed.

        The last parameter "length" is optional if the  variable  to
        be  read  is  a  file  zone.  In  this  case  the  length is
        determined  from  the  Data  Dictionary.   If   the   length
        specified  is  greater  than the length of the field and the
        user enters more characters than can be  held  in  the  zone
        high  order  truncation will occur for numeric variables and
        low order truncation will occur for string variables.

        The standard output stream is flushed.

        EXAMPLE




        QUINTET                    - 92 -                LOGORDI SA.




        XYINPUT()                OLQCL Only                XYINPUT()




                .
                .
                .
                CREWIN(5, 10, 10, 70);
                XYDISP(7, 12, RV, "Please enter the current time: ");
                XYINPUT(7, 44, LV, &utime, 20);
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                XYDISP(),   REDRAW,   CLRSCR,   DELWIN,    CREWIN(),
                CLEARM(), window.

        BUGS
                The coordinates are not checked for  validity.  That
                means  it is possible to position the cursor outside
                the current virtual window. If this happens  strange
                results will occur.

                The length of  the  string  to  be  printed  is  not
                checked  for  validity. That means it is possible to
                print something outside the current virtual  window.
                If this happens strange results will occur.





























        QUINTET                    - 93 -                LOGORDI SA.




        CCC                      BQCL Only                       CCC




        NAME
                CCC - In line 'C' programming in batch programs

        SYNOPSIS
                CCC c_statements

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                If  you  are  familiar  with  the  'C'   programming
                language,  it  is  possible to directly code in line
                source statements. These statements are  ignored  by
                the  BQCL  translator  and  are  passed  on  to  the
                generated 'C' source file.  If you choose to  do  in
                line 'C' source coding, it is your responsibility to
                make sure there  are  no  syntax  or  logic  errors.
                Additionally,  the  generated  program  may  contain
                serious errors caused by  improper  or  non-portable
                'C'  source  coding. These errors may cause abnormal
                termination of the generated  programs  with  system
                messages  like  "Memory fault", "Bus error" or "Core
                dumped". We do not recommend  use  of  this  feature
                unless  absolutely  necessary  and then with extreme
                caution. Bugs caused by user 'C' source  coding  can
                be very tricky to track down and fix.

                If declaration of global 'C' variables  is  desired,
                the   declarations   must   be   placed  before  the
                "BEGINNING" BQCL keyword within  the  source  script
                where they are first used.

                To define 'C' functions it is necessary to place the
                source  code  after the "END OF SCRIPT" keywords. In
                this case the "CCC" keyword is not  necessary.   All
                source  code  after  the "END OF SCRIPT" keywords is
                directly placed at the  end  of  the  generated  'C'
                source file.

                There are some restrictions enforced on in line  'C'
                code  within  a  BQCL  script  if  the 'C' code lies
                between  the  "BEGINNING"  and   "END   OF   SCRIPT"
                boundries.   "CCC"  statements  may  not lie between
                BQCL code segments. That means that the in line  'C'
                code must be inside BQCL code segments. There is one
                exception to this rule which is that no 'C' code may
                be  programmed inside the "INPUTS ... END OF INPUTS"
                and "PREPARE ... END OF PREPARE" BQCL code segments.






        QUINTET                    - 94 -                LOGORDI SA.




        CCC                      BQCL Only                       CCC




                This works:

                        .
                        .
                        .
                        /* LOAD FROM is a typical BQCL code segment */
                        LOAD FROM
                                F1 STARTING FREOM BGN NO CONDITION
                        CCC     for (i = 1; i <= 10; ++i)
                        CCC             qtot /= ((double)i * 100.00)
                                $rglfm : 8;
                        EOL
                        .
                        .
                        .

                But not this:

                        .
                        .
                        .
                        CCC     for (i = 1; i <= 10; ++i)
                        CCC             qtot /= ((double)i * 100.00)
                        /* LOAD FROM is a typical BQCL code segment */
                        LOAD FROM
                                F1 STARTING FREOM BGN NO CONDITION
                                $rglfm : 8;
                        EOL
                        .
                        .
                        .

        EXAMPLE

        RETURN VALUE
                None.

        SEE ALSO
                The C Programming Language, by  Brian  W.  Kernighan
                and Dennis M. Ritchie.
















        QUINTET                    - 95 -                LOGORDI SA.




        CCC                      OLQCL Only                      CCC




        NAME
                CCC - In line 'C' programming in interactive programs

        SYNOPSIS
                CCC c_statements

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                If  you  are  familiar  with  the  'C'   programming
                language,  it  is  possible to directly code in line
                source statements. These statements are  ignored  by
                the  OLQCL  translator  and  are  passed  on  to the
                generated 'C' source file.  If you choose to  do  in
                line 'C' source coding, it is your responsibility to
                make sure there  are  no  syntax  or  logic  errors.
                Additionally,  the  generated  program  may  contain
                serious errors caused by  improper  or  non-portable
                'C'  source  coding. These errors may cause abnormal
                termination of the generated  programs  with  system
                messages  like  "Memory fault", "Bus error" or "Core
                dumped". We do not recommend  use  of  this  feature
                unless  absolutely  necessary  and then with extreme
                caution. Bugs caused by user 'C' source  coding  can
                be very tricky to track down and fix.

                If declaration of global 'C' variables  is  desired,
                the   declarations   must   be   placed  before  the
                "BEGINNING" OLQCL keyword within the  source  script
                where they are first used.

                To define 'C' functions it is necessary to place the
                source  code  after the "END OF SCRIPT" keywords. In
                this case the "CCC" keyword is not  necessary.   All
                source  code  after  the "END OF SCRIPT" keywords is
                directly placed at the  end  of  the  generated  'C'
                source file.

                Since in line 'C' source statements  may  be  placed
                virtually  anywhere  within  the  OLQCL  script, the
                scope of OLQCL statements over 'C' source statements
                and  vice  versa is important. For example, 'C' code
                within a "WHILE" loop will be  repeated  along  with
                other OLQCL statements.

        EXAMPLE

                CCC     typedef struct date {
                CCC             int     yy,




        QUINTET                    - 96 -                LOGORDI SA.




        CCC                      OLQCL Only                      CCC




                CCC                     mm,
                CCC                     dd;
                CCC     } DATE;
                CCC
                CCC     DATE    D;

                BEG "chk_date"

                CCC     DATE.yy = Bacct.yy;
                CCC     DATE.mm = Bacct.mm;
                CCC     DATE.dd = Bacct.dd;
                CCC     return(vdate(&D));

                EOS

                vdate(d)
                DATE    *d
                {
                        if (d.yy < 1986)
                                return(1);
                        if (d.mm < 1 || d.mm > 12)
                                return(1);
                        if (d.dd < 1 || d.dd > 31)
                                return(1);
                        return(0);
                }

        RETURN VALUE
                None.

        SEE ALSO
                The C Programming Language, by  Brian  W.  Kernighan
                and Dennis M. Ritchie.























        QUINTET                    - 97 -                LOGORDI SA.




        DIRECT ON                BQCL Only                 DIRECT ON




        NAME
                DIRECT ON - Redirect output to sequential ascii file

        SYNOPSIS
                DIRECT ON "file_name" { APPEND | CREATE }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                The "DIRECT ON" BQCL statement  allows  output  from
                batch  programs to be redirected to a standard ascii
                seqential file named  by  "file_name".   "file_name"
                may  be  specified  in  any valid form of UNIX* file
                system syntax.  That means absolute or relative path
                name specifications may be used.

                The  "CREATE"  constant  forces  the  truncation  of
                "file_name"  if  it already exists to zero bytes. If
                it does not exist, it will be created.

                The "APPEND" constant will add any new output to the
                end  of "file_name" if it already exists. If it does
                not exist, it will be created.

        EXAMPLE
                .
                .
                .
                DIRECT ON "/usr/u/joma/total_file" CREATE
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                PIPE_ON.















        QUINTET                    - 98 -                LOGORDI SA.




        PIPE ON                  BQCL Only                   PIPE ON




        NAME
                PIPE ON - Redirect output to another program or device

        SYNOPSIS
                PIPE ON { "prog_name" | PRINTER }

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        popen(3)

        DESCRIPTION
                The "PIPE ON"  BQCL  statement  allows  output  from
                batch  programs  to be redirected to another program
                or device such as a line printer. You  are  free  to
                specify  any  program  which  may be found using the
                exported  shell  variable  "PATH"  (see   sh(1)   or
                csh(1)).  Flags  may  also  be passed to the program
                invoked (see popen(3)).

                If you use the literal "PRINTER", it is the same  as
                specifying "lpr" as the program to be piped on.

        EXAMPLE
                .
                .
                .
                PIPE ON "lp"
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                DIRECT_ON.



















        QUINTET                    - 99 -                LOGORDI SA.




        ARGV                    OLQCL & BQCL                    ARGV




        NAME
                ARGV - Command line argument variables

        SYNOPSIS
                ARGC
                ARGVnn

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        'C' equivalent

        DESCRIPTION
                The global variables "ARGC"  and  "ARGV"  provide  a
                means  of accessing command line arguments passed to
                the program when it is invoked. "ARGC" contains  the
                number of arguments passed. "ARGV" contains an array
                on strings that contain the arguments. To access  an
                argument, the index "nn" is used.  "nn" is always at
                least one since by convention, "ARGV0" is  the  name
                of  the  program  which  is invoked. "nn" may be any
                number between zero and ninety nine.

        EXAMPLE

                .
                .
                .
                /* First check ARGC to determine the    */
                /* number of arguments passed. Then if  */
                /* there are enough, assign value to    */
                /* file zone called "date".             */
                IF (ARGC <> 2) {
                        MESSAGE("Usage: client MM/DD/YY");
                        $_ret : 1;
                }
                ELSE
                        F1.date : ARGV1;
                .
                .
                .

        RETURN VALUE
                None.

        BUGS
                Because the number of arguments passed to a  program
                is  determined  at  run  time,  it  is impossible to
                detect if the user has written code  which  accesses
                "ARGV"   with  the  potential  of  core  dumping  at
                translation time. The variable "ARGV" is dynamically
                allocated  at  run  time.  That  means if you access




        QUINTET                   - 100 -                LOGORDI SA.




        ARGV                    OLQCL & BQCL                    ARGV




                "ARGV" using an "nn" which is not within the correct
                range  (at  run time), you will surely core dump. We
                suggest that you access the  variable  "ARGV"  using
                the techniques described in the above example.




















































        QUINTET                   - 101 -                LOGORDI SA.




        AUTOMODE                 OLQCL Only                 AUTOMODE




        NAME
                AUTOMODE - Automat current mode variable

        SYNOPSIS
                AUTOMODE

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Integer

        DESCRIPTION
                The  reserved  variable  "AUTOMODE"   contains   the
                current mode of the Automat (i.e. the runtime). It's
                value may be checked for one of the following  valid
                Automat modes:


                        CREATION
                        MODIFICATION
                        SELECTION


                The use of this feature should be resticted to field
                level scripts.
        EXAMPLE

                .
                .
                .
                IF (AUTOMODE <> SELECTION) {
                        IF (name = "") {
                                ERROR("You must enter some data", name);
                        }
                }
                .
                .
                .


















        QUINTET                   - 102 -                LOGORDI SA.




        LINES                    OLQCL Only                    LINES




        NAME
                LINES, COLS - Terminal line and column variables

        SYNOPSIS
                LINES
                COLS

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Integer

        DESCRIPTION
                "LINES" and  "COLS"  define  the  active  terminal's
                screen  boundries.  They  may be checked for current
                value or used as parameters  to  functions  such  as
                "XYDISP()"   and   "XYINPUT()"  which  position  the
                cursor. They should not  be  modified  at  execution
                time.

        EXAMPLE

                .
                .
                .
                IF (COLS > 80) { /* In large screen (127 column) */
                        CREWIN(LINES - 6, 78, LINES - 1, COLS - 1);
                        XYDISP(LINES - 3, 80, RV,
                        "Computing account totals, please wait");
                }
                ELSE {          /* In normal screen (80 column) */
                        CREWIN(LINES - 6, 5, LINES - 1, 50);
                        XYDISP(LINES - 3, 7, RV,
                        "Computing account totals, please wait");
                }
                .
                .
                .

        SEE ALSO
                XYDISP(), XYINPUT(), termdef.

        BUGS
                At the current time it is  possible  to  modify  the
                values  contained  in  "LINES" and "COLS". If you do
                this the results are undefined.










        QUINTET                   - 103 -                LOGORDI SA.




        rgvars                   BQCL Only                    rgvars




        NAME
                rgvars - Report Generator user accessable variables

        SYNOPSIS
                $rglcount, $rgpg, $rglpp, $rglfm,
                $rgmm, $rgdd, $rgyy, $rghrs, $rgmin, $rgsec

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Double

        DESCRIPTION
                When programming with the  BQCL  Translator,  it  is
                possible  to  access  some of the internal variables
                generated  with  the  program.  When  the  generated
                program  is  executed, the current date and time are
                obtained  from  the  system.   The  left  margin  is
                intially  set  to the first column and the number of
                lines per page is initially set to 66.  The  current
                page  and line counters are initialized to zero. The
                variables and there explanations are shown below:


                        $rglcount       current line counter
                        $rgpg           current page counter
                        $rglpp          maximum lines per page
                        $rglfm          current left margin column
                        $rgmm           current month
                        $rgdd           current day
                        $rgyy           current year
                        $rghrs          current hour
                        $rgmin          current minute
                        $rgsec          current second


        EXAMPLE

                .
                .
                .
                TITLE PAGE
                        /* Set left margin to 8th column        */
                        /* Set page length to 45 lines          */
                        $rglfm : 8;
                        $rglpp : 45;
                        PRINT   STRING(72, "="), NL, NL;
                                "Date: ", $rgmm USING "99", "/",
                                $rgdd USING "99", "/",
                                $rgyy USING "99", NL, NL,
                                "Time: ", $rghrs USING "99", ":",
                                $rgmin USING "99", ":",




        QUINTET                   - 104 -                LOGORDI SA.




        rgvars                   BQCL Only                    rgvars




                                $rgsec USING "99", NL, NL,
                                STRING(72, "="), NL;
                        ;
                ;
                .
                .
                .

        RETURN VALUE
                None.

        BUGS
                When specifying a "TITLE PAGE", the first line  will
                not  be  shifted  to  the proper column specified by
                $rglfm unless it is left at the initial value.









































        QUINTET                   - 105 -                LOGORDI SA.




        string                  OLQCL & BQCL                  string




        NAME
                string, numeric - User defined string and numeric
                                  variables

        SYNOPSIS
                { & | $ }[a-z_][a-z_0-9]

        QUINTET ORIGIN
                Origin: Version 1.00

                Internal Representation:        Char, Double

        DESCRIPTION
                It  is  possible  to  define  string   and   numeric
                variables     within    scripts.     The    internal
                representation is always global. When a new variable
                is  encountered  it  is  defined  (as in BASIC). The
                dollar "$"  character  denotes  a  numeric  floating
                point  variable. The ampersand "&" character denotes
                a  string  variable.  Numeric  variables  may   only
                contain  numeric  data. String variables may contain
                any sequence of  ascii  characters.   All  variables
                must  begin  with any character in the range [a-z_].
                All the remaining characters used to  construct  the
                variable  name  must be from in the range [a-z_0-9].
                No upper case letters are allowed.

                To ensure portability with all  'C'  compilers,  the
                length  of  all  variable names should be limited to
                five characters. It is possible to have  string  and
                numeric  variables  with  the same name. Internally,
                the first  character  of  all  user  defined  string
                variables  is  an  's',  while all numeric variables
                start with an 'n'. Only  the  first  ten  characters
                specified are processed by the language translators.
                All  remaining  characters   are   ignored   without
                warning.

        EXAMPLE

                .
                .
                .
                &s_name : name;
                &s_addr : addr;
                $s_sex : sex;
                .
                .
                .

        BUGS
                A common error is the mispelling of  a  variable  in




        QUINTET                   - 106 -                LOGORDI SA.




        string                  OLQCL & BQCL                  string




                one  or  more  places within an application program.
                There is no warning generated as the translators can
                not detect if the mispelled variable is not actually
                intended to be a new variable. In a future release a
                cross  reference  program will be provided to detect
                this error.


















































        QUINTET                   - 107 -                LOGORDI SA.




        TOUP()                  OLQCL & BQCL                  TOUP()




        NAME
                TOUP(), TODOWN() - Shift a string to upper or
                                   lower case

        SYNOPSIS
                TOUP(var_name)
                VAR     var_name;

                TODOWN(var_name)
                VAR     var_name;

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representation:        Function

        DESCRIPTION
                "TOUP()" and "TODOWN()" provide  a  means  to  shift
                character  string  variables to upper and lower case
                respectively.  All  the  characters   contained   in
                "var_name" will be shifted if possible.

        EXAMPLE

                .
                .
                .
                TOUP(&s_name);
                TODOWN(name);
                .
                .
                .

        RETURN VALUE
                None.

        SEE ALSO
                string, TOUCH(), REPAINT().


















        QUINTET                   - 108 -                LOGORDI SA.




        TOUP()                  OLQCL & BQCL                  TOUP()




        BUGS
                It is not possible to directly shift a  string  file
                zone which was defined as having a length of one. To
                get around this problem it  is  necessary  to  first
                store  the  file  zone  in  a  user  defined  string
                variable. The following  code  segment  demonstrates
                the necessary code modifications:


                .
                .
                .
                &tmp : F1.code; /* code was defined in the DD with */
                                /* a length of 1. */
                TOUP(&tmp);
                F1.code : &tmp;
                .
                .
                .


                This will be fixed in a future release.


































        QUINTET                   - 109 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM




        NAME
                Interm, outterm - Terminal definition package

        SYNOPSYS
                interm terminal_name [debug]

                outterm terminal_name

        QUINTET ORIGIN
                Origin: Version 2.00

                Internal Representaion:         External programs

        DESCRIPTION
                As  QUINTET  and  the  programs  it  generates   are
                designed   to   run   in   a   terminal  independent
                environment, two general purpose terminal  compilers
                are  available  to create the necessary binary files
                for all online programs  to  run  on  virtually  any
                terminal.  These  two  compilers are called "interm"
                and "outterm". These compilers provide  the  ability
                to  define all the standard terminal capabilities as
                well as extentions to  handle  video  attribute  and
                semi-graphic character definitions.

                All online programs require the  definition  of  the
                shell   variable  "QTERM".   The  windowing  program
                itself requires the definition of the shell variable
                "WTERM".  The  editor you choose to use requires the
                definition of  the  shell  variable  "TERM"  (if  it
                supports a full screen mode like vi(1)).

                The "TERM" shell variable is retrieved by vi(1)  for
                example  and  the correct termcap(5) (for System III
                and older) or terminfo(5) (for System V  and  newer)
                files  are  loaded  so  that the editor can function
                properly (on the current terminal). These files  are
                supplied with your computer.

                The terminal source files consist  of  a  number  of
                colon-seperated  fields.   The  first entry for each
                terminal gives the names by which  the  terminal  is
                known  seperated  by  verical  bar characters and is
                purely commentary. All remaining entries may  appear
                on  seperate  lines  or  may be combined on the same
                line. Entries may continue onto  mulitple  lines  by
                giving a \ as the last character of a line. Comments
                may appear but must  begin  in  column  one  and  be
                prefaced by a # as the comment marker.







        QUINTET                   - 110 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM




        CAPABILITIES
                The following list gives the names of  the  terminal
                capabilities,  their type (str=string, num=numeric),
                which terminal file they must be defined in (Q=".q",
                W=".w") and a desription.

                Name    Type    Term    Description

                cd      str     W       Clear to end of display
                ce      str     W       Clear to end of line
                cl      str     W       Clear screen
                cm      str     W       Cursor motion
                co      num     Q/W     Number of columns in line
                dl      str     W       Delete line
                fg      str     W       Shift terminal to large screen
                fp      str     W       Shift terminal to normal screen
                Gcc     str     W       Cross
                Gcid    str     W       Right bottom corner
                Gcig    str     W       Left bottom corner
                Gcsd    str     W       Right top corner
                Gcsg    str     W       Left top corner
                Gdcd    str     W       Vertical line with left arm
                Gdcg    str     W       Vertical line with right arm
                Gdci    str     W       Horizontal line with arm up
                Gdcs    str     W       Horizontal line with arm down
                Glh     str     W       Horizontal line
                Glv     str     W       Vertical line
                k0      str     Q       Right-arrow function key
                k1      str     Q       Left-arrow function key
                k2      str     Q       Up-arrow function key
                k3      str     Q       Down-arrow function key
                k4      str     Q       Function key number 1
                k5      str     Q       Function key number 2
                k6      str     Q       Function key number 3
                k7      str     Q       Function key number 4
                k8      str     Q       Function key number 5
                k9      str     Q       Function key number 6
                k10     str     Q       Function key number 7
                k11     str     Q       Function key number 8
                k12     str     Q       Function key number 9
                k13     str     Q       Function key number 10
                kb      str     Q/W     Sent by backspace key
                ki      str     W       Cursor invisible
                kr      str     W       Sent by terminal right-arrow key
                kv      str     W       Cursor visible
                li      num     Q/W     Number of lines on screen or page
                Va      str     W       End video semi-graphics mode
                Vc      str     W       Video blinking
                Vd      str     W       Video low
                Vg      str     W       Begin video semi-graphics mode
                Vi      str     W       Video reverse
                Vn      str     W       Video normal




        QUINTET                   - 111 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM




                Vs      str     W       Video underline
                zm      str     W       Zone mark character


        All terminal capability names have two, three or four letter
        codes.  Each capability is either of str (ie. string) or num
        (ie. numeric) type. For example, "co" indicates  the  number
        of columns on a terminal.  Therefor, "co#80" gives the value
        80 as the number of columns for a terminal. Finally,  string
        valued  capabilities,  such  as  "ce"  (clear to end of line
        sequence) are given by the code, an =,  and  then  a  string
        terminated with a :. Currently, delays are not supported.

        A number of escape sequences  are  provided  in  the  string
        valued capabilities for easy encoding of characters there. A
        \E maps to an ESCAPE character. ^x maps to a  control-x  for
        any  appropriate  x, and the sequences \n \r \t \b \f give a
        newline, return, tab, backspace and formfeed,  respectively.
        Finally, characters may be given as three octal digits after
        a \, and the characters ^ and \ may be given as \^  and  \\.
        If  it  is necessary to place a : in a capability it must be
        escaped as  \072.  If  it  is  necessary  to  place  a  null
        character in a string capability it must be encoded as \200.

        Cursor  addressing  is  described   by   the   "cm"   string
        capability,  containing  escapes  similar  to  those used by
        printf(3S) (%x). These escaped characters (%x) substitute to
        encodings  of  the  current  line  or column position, while
        other characters are passed through unchanged. If  the  "cm"
        string is thought of as being a function, then its arguments
        are the line and the column to which motion is desired,  and
        the % encodings have the following meanings:


        %d      as in printf(3S), 0 origin
        %2      like %2d in printf(3S)
        %3      like %3d in printf(3S)
        %.      like %c in printf(3S)
        %+x     adds x to value, then %.
        %>xy    if value > x adds y, no output
        %r      reverses order of line and column, no output
        %i      increments line/column (for 1 origin)
        %%      gives a single %
        %n      exclusive or row and column with 0140(DM2500)
        %B      BCD(16*(x/10))+(x%10), no output.
        %D      Reverse coding (x-2*(x%16)), no output. (Delta Data).



        To define the terminal files necessary for QUINTET  and  the
        generated  online  programs  two  terminal source code files
        must be created, successfully compiled and debugged.




        QUINTET                   - 112 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM




        To create these two  source  files,  change  directories  to
        where the source code is kept:


                % cd $QROOT/tsrc <RETURN>


        At this point it will be necessary to have the documentation
        of  the  terminal  you  wish to define on hand. If you don't
        have it, get it.

        All the online  application  program  terminal  source  code
        files  are  suffixed by ".q". All the window terminal source
        code files are suffixed by ".w".  Note that  for  each  ".q"
        file there is one ".w" file.

        As an example, we will show the two source  code  files  for
        the  hp2392a  terminal. The file "hp2392a.q" file looks like
        this:


                hp2392a|VIRTUAL hp2392a TERMINAL:\
                #
                #       Line and column definition
                #
                        :li#24:\
                        :co#80:\
                #
                #       Arrow key definitions
                #
                        :k0=\033\133103:\
                        :k1=\033\133104:\
                        :k2=\033\133101:\
                        :k3=\033\133102:\
                #
                #       Function key definitions
                #
                        :k4=\033\117120:\
                        :k5=\033\117121:\
                        :k6=\033\117122:\
                        :k7=\033\117123:\
                        :k8=\033\117155:\
                        :k9=\033\117154:\
                        :k10=\033\117115:\
                        :k11=\033\117156:\
                        :k12=\033\117160:\
                        :k13=\033\117161:\
                #
                #       Backspace definition
                #
                        :kb=\010:\





        QUINTET                   - 113 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM




        The file "hp2392a.w" file looks like this:



                hp2392a|REAL hp2392a terminal:\
                #
                #       Although this terminal is vt100
                #       like (when in ANSI mode) it does
                #       not support 132 column format.
                #
                        :co#80:\
                        :li#24:\
                        :cl=\E[2J\E[H:\
                        :cm=2\E[%i%2;%3H:\
                        :ce=\E[K:\
                        :cd=50\E[J:\
                        :dl=\E[2K:\
                        :ki=\0:\
                        :kv=\0:\
                #
                #       The "kr" (Right-arrow sequence) is required
                #
                        :kr=\E[C:\
                        :kb=^H:\
                        :Vn=\E[0m:\
                        :Vd=\E[1m:\
                        :Vi=\E[7m:\
                        :Vc=\E[5m:\
                        :Vs=\E[4m:\
                        :Vg=\E(0:\
                        :Va=\E(B:\
                        :Gcsg=l:\
                        :Gcsd=k:\
                        :Gcid=j:\
                        :Gcig=m:\
                        :Gdcg=t:\
                        :Gdcs=w:\
                        :Gdcd=u:\
                        :Gdci=v:\
                        :Gcc=n:\
                        :Glh=q:\
                        :Glv=x:\
                        :zm=~:


        The most effective way to prepare a terminal description  is
        by  imitating the description of a similar terminal in a new
        set of ".q" and ".w" files and to  build  up  a  description
        gradually.  Then  by  running  either QUINTET or a generated
        online program the definition may be tested.

        EXAMPLE




        QUINTET                   - 114 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM





                % interm hp2392a <RETURN>
                % outterm hp2392a <RETURN>

                (csh(1) users:)

                % setenv QTERM q.hp2392a <RETURN>
                % setenv WTERM w.hp2392a <RETURN>
                % setenv TERM hp2392a <RETURN>

                (sh(1) users:)

                % QTERM=q.hp2392a <RETURN>
                % WTERM=w.hp2392a <RETURN>
                % TERM=hp2392a <RETURN>
                % export QTERM WTERM TERM <RETURN>

        HINTS
                Limit the names  of  the  terminal  files  to  eight
                characters.

                Build up the ".q" terminal definition first.

                Copy the description of the  terminal  you  want  to
                prepare  from  "/etc/termcap" (if it exists) and use
                it to  build  up  the  ".w"  terminal.  Unrecognized
                sequences are ignored and a warning is displayed.

                It is normally a good idea to edit and  compile  the
                terminal  files on one terminal and to debug then on
                another. This will save time by reducing the  number
                of  times  the  shell  variables "QTERM" and "WTERM"
                have to be exported.

        RETURN VALUE
                Both interm and outerm return zero  upon  successful
                completion and one otherwise.

        SEE ALSO
                window.

        FILES
                $QROOT/tsrc/*.w  source code to window terminals
                $QROOT/tsrc/*.q  source code to application terminals
                $QROOT/tbin/w.*  binary code to window terminals
                $QROOT/tbin/q.*  binary code to application terminals
                /etc/termcap     file containg terminal descriptions

        BUGS
                If the name of the terminal file is not the same  as
                the  name  of the terminal defined in the first line
                of the definition file, strange  errors  will  occur




        QUINTET                   - 115 -                LOGORDI SA.




        INTERM                   OLQCL Only                   INTERM




                when running "interm" and "outterm" and the terminal
                in question will not compile.






















































        QUINTET                   - 116 -                LOGORDI SA.


